				local Addon = _G[...]local modName = ...local title = "Model"local Masque = LibStub('Masque', true)local TEXTURE = [[Interface\Addons\]]..modName..[[\textures\Focus]]local widget = Addon:NewWidget(title, 'PlayerModel')widget.defaults = {	visibility = {		border = {			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			file = "Blizzard",			thickness = 10,		},		background = {			enable = false,			file = "Raid",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},	},	basic = {		position = {			y = 61,			x = -194,			frameLevel = 4,			anchor = "TopRight",			frameStrata = 2,		},		model = {			rotation = 22,			zoom = 40,			enable = false,			height = 128,			width = 95,		},	},}	function widget:New(parent)		local bar = self:Bind(CreateFrame('PlayerModel', nil, parent.box, 'ModelWithZoomTemplate'))	bar.owner = parent	bar:SetFrameLevel(1)	bar:RegisterEvent('UNIT_MODEL_CHANGED')		bar.drop = bar.drop or CreateFrame('StatusBar', nil, bar)	bar.drop:SetMinMaxValues(0,1)	bar.drop:SetValue(1)	bar.drop:SetAllPoints(bar)		local v = bar:GetFrameLevel()-2	if v < 1 then v = 1 end		bar.drop:SetFrameLevel(v)		bar.owner = parent	bar.title = title	bar.handler = parent.id	return barendfunction widget:Load()	self:RegisterForDrag(false)	self:EnableMouse(false)	self:SetScript('OnEvent', self.OnEvent)	self:SetScript('OnShow', self.OnShow)	self:SetScript('OnMouseWheel', self.OnMouseWheel)	self:SetScript('OnMouseUp', self.OnMouseUp)endfunction widget:Layout()	if self.sets.basic.model.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:Resize()	self:SetVisibility()		if self:GetParent().unitButton then		self:GetParent().unitButton:SetFrameStrata("BACKGROUND")	end		local rot = (self.sets.basic.model.rotation/360)*6.28318306053847	local zoo = self.sets.basic.model.zoom/100	self.zoomlevel = zoo	self.rotation = rot	self:SetRotation(rot or MODELFRAME_DEFAULT_ROTATION)	self:SetPortraitZoom(zoo or MODELFRAME_MIN_ZOOM)	self:EnableMouse(self.sets.basic.model.mouse)	endfunction widget:Reposition()	local position = self.sets.basic.position	local model = self.sets.basic.model		self:ClearAllPoints()	self:SetPoint(position.anchor, self:GetParent(), position.x, position.y)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(position.frameLevel)		end		function widget:Resize()	local model = self.sets.basic.model	self:SetSize(model.width, model.height)endfunction widget:SetVisibility()	local visibility = self.sets.visibility	local background = visibility.background	local border = visibility.border	local pad = background.padding		local BG = self:GetMediaPath("statusbar", background.file)	local brd = self:GetMediaPath("border", border.file)		if not background.enable then		BG = ""	end	if not border.enable then		brd = ""	end	-- self.drop:SetBackdrop({ 		-- bgFile = BG, 		-- edgeFile = brd,		-- tile = false,		-- edgeSize = border.thickness, 		-- insets = { left = pad, right = pad, top = pad, bottom = pad }	-- })	-- do		-- local color = background.color		-- self.drop:SetBackdropBorderColor(color.r, color.g, color.b, color.a)	-- end	-- do		-- local color = background.color		-- self.drop:SetBackdropColor(color.r, color.g, color.b, color.a)	-- endendfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate()	local unit = self.owner.id		local unit = self.owner.id	local dead = UnitIsGhost(unit) or UnitIsDead(unit)	if (max == 0 or dead) and (self:GetAlpha() ~= .5) then		self:SetAlpha(.5)	elseif self:GetAlpha() ~= 1 then		self:SetAlpha(1)	end	self.lastUnit = self.lastUnit or UnitGUID(unit)	if self.lastUnit ~= UnitGUID(unit) then		self.lastUnit = UnitGUID(unit)		self:GetScript('OnEvent')(self)	endendfunction widget:OnEvent(...)	if self.owner.id and UnitName(self.owner.id) then		self:SetUnit(self.owner.id)	endendfunction widget:OnShow()	self:GetScript('OnEvent')(self)	self:SetRotation(self.rotation or MODELFRAME_DEFAULT_ROTATION)	self:SetPortraitZoom(self.zoomlevel or MODELFRAME_MIN_ZOOM)endfunction widget:OnMouseWheel(...)	Model_OnMouseWheel(self, ...)	if self.zoomLevel ~= self.sets.basic.model.zoom then		self.sets.basic.model.zoom = self.zoomLevel	endendfunction widget:OnMouseUp(...)	Model_OnMouseUp(self, ...)	if self.rotation ~= self.sets.basic.model.rotation then		self.sets.basic.model.rotation = self.rotation	endendwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "model",			},			{				name = 'Enable Mouse',				kind = 'CheckButton',				key = 'mouse',				panel = "model",			},			{				name = 'Height',				kind = 'Slider',				key = 'height',				min = 10,				max = 250,				panel = 'model',			},			{				name = 'Width',				kind = 'Slider',				key = 'width',				min = 10,				max = 250,				panel = 'model',			},			{				name = 'Rotation',				kind = 'Slider',				key = 'rotation',				min = 0,				max = 360,				panel = "model",			},				{				name = 'Zoom',				kind = 'Slider',				key = 'zoom',				min = -50,				max = 300,				panel = "model",			},			{				name = 'Death Effect',				kind = 'CheckButton',				key = 'deathEffect',				panel = "model",			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},	}