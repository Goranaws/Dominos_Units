local Addon = _G[...]local modName = ...local StatusBar = Addon.StatusBar local PowerBarColor = {};do	PowerBarColor["MANA"] = { r = 0.00, g = 0.00, b = 1.00 };	PowerBarColor["RAGE"] = { r = 1.00, g = 0.00, b = 0.00, fullPowerAnim=true };	PowerBarColor["FOCUS"] = { r = 1.00, g = 0.50, b = 0.25, fullPowerAnim=true };	PowerBarColor["ENERGY"] = { r = 1.00, g = 1.00, b = 0.00, fullPowerAnim=true };	PowerBarColor["COMBO_POINTS"] = { r = 1.00, g = 0.96, b = 0.41 };	PowerBarColor["RUNES"] = { r = 0.50, g = 0.50, b = 0.50 };	PowerBarColor["RUNIC_POWER"] = { r = 0.00, g = 0.82, b = 1.00 };	PowerBarColor["SOUL_SHARDS"] = { r = 0.50, g = 0.32, b = 0.55 };	PowerBarColor["LUNAR_POWER"] = { r = 0.30, g = 0.52, b = 0.90, atlas="_Druid-LunarBar" };	PowerBarColor["HOLY_POWER"] = { r = 0.95, g = 0.90, b = 0.60 };	PowerBarColor["MAELSTROM"] = { r = 0.00, g = 0.50, b = 1.00, atlas = "_Shaman-MaelstromBar", fullPowerAnim=true };	PowerBarColor["INSANITY"] = { r = 0.40, g = 0, b = 0.80, atlas = "_Priest-InsanityBar"};	PowerBarColor["CHI"] = { r = 0.71, g = 1.0, b = 0.92 };	PowerBarColor["ARCANE_CHARGES"] = { r = 0.1, g = 0.1, b = 0.98 };	PowerBarColor["FURY"] = { r = 0.788, g = 0.259, b = 0.992, atlas = "_DemonHunter-DemonicFuryBar", fullPowerAnim=true };	PowerBarColor["PAIN"] = { r = 255/255, g = 156/255, b = 0, atlas = "_DemonHunter-DemonicPainBar", fullPowerAnim=true };	-- vehicle colors	PowerBarColor["AMMOSLOT"] = { r = 0.80, g = 0.60, b = 0.00 };	PowerBarColor["FUEL"] = { r = 0.0, g = 0.55, b = 0.5 };	PowerBarColor["STAGGER"] = { {r = 0.52, g = 1.0, b = 0.52}, {r = 1.0, g = 0.98, b = 0.72}, {r = 1.0, g = 0.42, b = 0.42},};	-- these are mostly needed for a fallback case (in case the code tries to index a power token that is missing from the table,	-- it will try to index by power type instead)	PowerBarColor[0] = PowerBarColor["MANA"];	PowerBarColor[1] = PowerBarColor["RAGE"];	PowerBarColor[2] = PowerBarColor["FOCUS"];	PowerBarColor[3] = PowerBarColor["ENERGY"];	PowerBarColor[4] = PowerBarColor["CHI"];	PowerBarColor[5] = PowerBarColor["RUNES"];	PowerBarColor[6] = PowerBarColor["RUNIC_POWER"];	PowerBarColor[7] = PowerBarColor["SOUL_SHARDS"];	PowerBarColor[8] = PowerBarColor["LUNAR_POWER"];	PowerBarColor[9] = PowerBarColor["HOLY_POWER"];	PowerBarColor[10] = PowerBarColor["STAGGER"];	PowerBarColor[11] = PowerBarColor["MAELSTROM"];	PowerBarColor[13] = PowerBarColor["INSANITY"];	PowerBarColor[17] = PowerBarColor["FURY"];	PowerBarColor[18] = PowerBarColor["PAIN"];endlocal PowerToken = {}PowerToken[0] = "MANA"PowerToken[1] = "RAGE"PowerToken[2] = "FOCUS"PowerToken[3] = "ENERGY"PowerToken[4] = "CHI"PowerToken[5] = "RUNES"PowerToken[6] = "RUNIC_POWER"PowerToken[7] = "SOUL_SHARDS"PowerToken[8] = "LUNAR_POWER"PowerToken[9] = "HOLY_POWER"PowerToken[10] = "STAGGER"PowerToken[11] = "MAELSTROM"PowerToken[13] = "INSANITY"PowerToken[17] = "FURY"PowerToken[18] = "PAIN"local ClassPower = {	Druid = {			["Bear Form"] = 1,--"RAGE",			["Cat Form"] = 3,--"ENERGY",			["Moonkin Form"] = 8,--"LUNAR_POWER",			["Treant Form"] = 0,--"MANA",			["Aquatic Form"] = 0,--"MANA",			["Travel Form"] = 0,	},	Warrior = 1,--"RAGE",	Paladin = 0,--"MANA",	Hunter = 2,--"FOCUS",	Rogue = 3,--"ENERGY",	Priest = 0,--"MANA",	Shaman = {		11,--"MAELSTROM",		11,--"MAELSTROM",		0,--"MANA"	},		Mage = 0,--"MANA",	Warlock = 0,--"MANA",	Monk = {		Brewmaster = 3,--"STAGGER",		Mistweaver = 0,--"MANA",		Windwalker = 3,--"CHI"	},	["Demon Hunter"] = 17,--"FURY",	["Death Knight"] = 6,--"RUNIC_POWER",}local function GetPower(unit)	local class = UnitClass(unit)	local powerType = ClassPower[class]	if not powerType then		return UnitPowerType(unit)	elseif type(powerType) == "number" then		return powerType	end	if class == "Druid" then		local formIndex = GetShapeshiftForm(unit)		if formIndex and (formIndex ~= 0) then			local _, form = GetShapeshiftFormInfo(formIndex)			if powerType[form] then				return powerType[form]			else				return UnitPowerType(unit)			end		else			return UnitPowerType(unit)		end	elseif (class == "Shaman") or (class == "Monk") then		local _, spec = GetSpecializationInfo(GetSpecialization())		if powerType[spec] then			return powerType[spec]		else			return UnitPowerType(unit)		end	endendlocal basePower = {Druid = 0, Warlock = 0, Shaman = 0, Mage = 0, Monk = 4, Paladin = 0, Priest = 0, Warrior = 1, Hunter = 2 , ["Death Knight"] = 6, Rogue = 3, ["Demon Hunter"] = 17}local function PowerMax(unit, index)	if (UnitClass(unit) == "Monk") then		if (GetSpecialization() == 1) then			return UnitHealthMax(unit)		else			UnitPowerMax(unit)		end	else		return UnitPowerMax(unit, index)	endendlocal function Power(unit, index)	if (UnitClass(unit) == "Monk") then		local _, spec = GetSpecializationInfo(GetSpecialization())		if (spec == "Brewmaster") then			return UnitStagger(unit)		else			UnitPower(unit)		end	else		return UnitPower(unit, index)	endendlocal function PowerType(unit, index)	local class = UnitClass(unit)	if (class == "Monk") or class == "Demon Hunter"then		return UnitPowerType(unit)	else		return UnitPowerType(unit, index) or UnitPowerType(unit)	endendlocal function GetUnitPowerInfo(unit)	local class = UnitClass(unit)	local _, spec = GetSpecializationInfo(GetSpecialization())	if basePower[class] == GetPower(unit) then		return spec	end	local specPower = GetPower(unit) or UnitPowerType(unit)	local Power = basePower[class] or UnitPowerType(unit)		if specPower == Power then		return nil	end	local _, baseToken, base_altR, base_altG, base_altB = PowerType(unit, Power)	local baseColor = PowerBarColor[baseToken]	if not baseColor then		if base_altR then			baseColor = {r = base_altR, g = base_altG, b = base_altB}		elseif (class == "Monk") and (spec == "Brewmaster") then			baseColor = PowerBarColor["STAGGER"]		else			baseColor = PowerBarColor['MANA']		end	end	return spec, Power, baseColorendlocal title = "Mana"--Mana Barlocal widget = Addon:NewWidget(title, 'StatusBar')local hori = {'LEFT', 'CENTER', 'RIGHT'}local vert = {'TOP',  'MIDDLE', 'BOTTOM'}local FormatValue = Addon.FormatValuelocal FormatBarValues = Addon.FormatBarValueswidget.defaults = {	text = {		text = {			color = {				a = 1,				b = 1,				g = 1,				r = 1,			},			justifyV = 1,			justifyH = 2,			format = "percent",			enable = true,			file = "Friz Quadrata TT",			mouseover = "value",			size = 10,		},		position = {			anchor = "Center",			x = 0,			y = 0,		},	},	visibility = {		background = {			enable = true,			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},		border = {			hpadding = 13,			vthickness = 17,			vpadding = -4,			color = {				a = 1,				b = 1,				g = 1,				r = 1,			},			file = "WoodBoards",			hthickness = 21,		},		texture = {			orientation = "HORIZONTAL",			file = "Raid",			fillStyle = "STANDARD",			opacity = 100,		},	},	basic = {		advanced = {			enable = true,			tooltip = true,		},		position = {			y = -41,			x = 6,			frameLevel = 3,			anchor = "TopLeft",			frameStrata = 2,		},		size = {			enable = true,			scale = 100,			height = 10,			width = 115,		},	},}	local texture = "Interface\\TARGETINGFRAME\\NumericThreatBorder"function widget:New(parent)		local bar = self:Bind(CreateFrame("StatusBar", nil, parent.box))		bar.status = StatusBar:New(bar)	bar.status:SetAllPoints(bar)	bar.status:ApplyStatusBarTexture('Interface\\RaidFrame\\Raid-Bar-Hp-Fill', 'BORDER')	bar.status:SetStatusBarColor(0,1,0,1)	bar.status:EnableMouse(false)	bar.status:Show()	bar.text = bar.text or bar:CreateFontString(nil, 'ARTWORK', 'TextStatusBarText')	bar.text:SetTextColor(1.0,1.0,1.0)	bar.drop = bar.drop or CreateFrame('StatusBar', nil, bar)	bar.drop:SetMinMaxValues(0,1)	bar.drop:SetValue(1)	bar.drop:SetAllPoints(bar)	bar.drop:SetFrameLevel(math.max(bar:GetFrameLevel()-2, 1))	bar.left = bar:CreateTexture(nil, 'ARTWORK')	bar.left:SetTexture(texture)	bar.leftCorner = bar:CreateTexture(nil, 'ARTWORK')	bar.leftCorner:SetTexture(texture)		bar.right = bar:CreateTexture(nil, 'ARTWORK')	bar.right:SetTexture(texture)	bar.rightCorner = bar:CreateTexture(nil, 'ARTWORK')	bar.rightCorner:SetTexture(texture)		bar.middle = bar:CreateTexture(nil, 'ARTWORK')	bar.middle:SetTexture(texture)		bar.owner = parent	bar.title = title			bar.handler = parent.id		return barendfunction widget:Layout()	if self.sets.basic.advanced.enable~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Resize()	self:Reposition()		self:LayoutText()	self:SetVisibility()	if self.status.EnableBorder then		local border = self.sets.visibility.border		self.status:EnableBorder(border.enable)		if border.enable == true then			self.status:SetBorderTexture(border.file, border.flipVertical)			self.status:SetBorderPadding(border.hpadding, border.vpadding)			border.vthickness = border.vthickness or 17			self.status:SetBorderThickness(border.hthickness, -border.vthickness)			self.status:SetBorderColor(border.color.r,border.color.g,border.color.b,border.color.a)		end	end		self:Update()endlocal function LookForSets(frame)	if not frame:GetParent() then		return nil, "Dead End"	elseif frame:GetParent().sets then		return frame:GetParent().sets	else		return LookForSets(frame:GetParent())	endendfunction widget:Resize()	local size = self.sets.basic.size		local width, height = (size.width), (size.height)	self:SetHeight(height)		local scale = size.scale/100	self:SetScale(scale)		local set = LookForSets(self)	if set then		local w = set.width		if set.magicWidth then			local d = w - 191			self:SetWidth((size.width  + d)/ scale)		else			self:SetWidth(width)		end	else		self:SetWidth(width)	endendfunction widget:Reposition()	local position = self.sets.basic.position	local scale = self.sets.basic.size.scale/100	self:ClearAllPoints()	self:SetPoint(position.anchor, self:GetParent(), position.x / scale, position.y / scale)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self.status:SetFrameStrata(lay)	local level = position.frameLevel	self:SetFrameLevel(level+2)	self.status:SetFrameLevel(level)	self.status.predictionBar:SetFrameLevel(level+2)endfunction widget:LayoutText()	local text = self.text			local font = self.sets.text.text	if font.enable then		text:Show()	else		text:Hide()		return	end	text:SetJustifyH(hori[font.justifyH] or font.justifyH or "CENTER") -- Sets horizontal text justification ('LEFT','RIGHT', or 'CENTER')	text:SetFont(self:GetMediaPath("font", font.file), font.size or 12)	text:SetTextColor(font.color.r, font.color.g, font.color.b, font.color.a)		local position = self.sets.text.position	text:ClearAllPoints()	local point	if font.justifyH == 1 then		point = "Left"	elseif font.justifyH == 2 then		point = "Center"	else		point = "Right"	end		if string.find(position.anchor, "Top") then		if point == "Center" then point = "" end		point = "Top"..point	elseif string.find(position.anchor, "Bottom") then		if point == "Center" then point = "" end		point = "Bottom"..point	end		text:SetPoint(point, self, position.anchor, position.x, position.y)endfunction widget:UpdatePredictedPowerCost()	local cost = 0;	local unit = self.owner.id	local spellID = select(10, UnitCastingInfo(unit));	if spellID then		local costTable = GetSpellPowerCost(spellID);		for _, costInfo in pairs(costTable) do			if costInfo.type == self.powerType then				cost = costInfo.cost;				break;			end		end	end	self.predictedPowerCost = cost;	return costendfunction widget:SetVisibility()	local visibility = self.sets.visibility		local background = visibility.background    if background.enable then        self.drop:SetStatusBarColor(background.color.r, background.color.g, background.color.b, background.color.a)    else        self.drop:SetStatusBarTexture("")    end	local texture = visibility.texture	self.status:SetOrientation(texture.orientation) -- "HORIZONTAL" or "VERTICAL"	self.drop:SetOrientation(texture.orientation)		self.status:SetFillStyle(texture.fillStyle)	self.status:ApplyStatusBarTexture(self:GetMediaPath('statusbar', texture.file) or texture.file)	self.drop:SetStatusBarTexture(self:GetMediaPath('statusbar', texture.file) or texture.file)        self.status:SetRotatesTexture(texture.rotateTexture)    self.drop:SetRotatesTexture(texture.rotateTexture)endfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:SetValues(current, minimum, maximum, overide, overideText)	local font = self.sets.text.text	self.status:SetMinMaxValues(minimum or 0, maximum or 0)	if ((overide) or (maximum <= 0)or (maximum == nil)) and self.text then		self.status:SetValue(math.max(minimum, 0))		self.text:SetText(overideText)		return		end	local Form = font.format	if font.mouseover ~= 'none' and (MouseIsOver(self)) then		Form = font.mouseover	end	self.text:SetText(FormatBarValues(current, maximum, Form))		self.status:SetValue(current or 0, self:UpdatePredictedPowerCost(self.ID) or 0)endfunction widget:SetColor(r, g, b, a)	if ( r ~= self.r or g ~= self.g or b ~= self.b) or (a ~= self.a) then		self.status:SetStatusBarColor(r, g, b)		self.r, self.g, self.b, self.a = r, g, b, a	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:UpdateType()	local unit = self.ID		local spec, basePower, baseColor = GetUnitPowerInfo(unit)		local dead = UnitIsGhost(unit) or UnitIsDead(unit)	local r, g, b = 0 , 0, 0	if ( not UnitIsConnected(unit)) then		r, g, b = 0.5, 0.5, 0.5	elseif baseColor then		r, g, b = baseColor.r, baseColor.g, baseColor.b	end	if dead then		r, g, b = r-.75, g-.75, b-.75	end		self:SetColor(r, g, b, 1)		if (self.powerType ~= basePower ) then		self.powerType = basePower;	endendfunction widget:OnUpdate()	local unit = self.owner.id	local class = UnitClass(unit)	local dead = UnitIsGhost(unit) or UnitIsDead(unit)		local spec, basePower = GetUnitPowerInfo(unit)	local Max = UnitPowerMax(unit, basePower)	local current = UnitPower(unit, basePower)	if (not basePower) or (Max == 0) then		self:Hide()		self.status:Hide()		return	else		self:Show()		self.status:Show()	end	if UnitIsGhost(unit) or UnitIsDead(unit) then		current = 0	end		self:SetValues(current, 0, Max, dead)	self:UpdateType()endwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Scale',				kind = 'Slider',				key = 'scale',				min = 25,				max = 200,				panel = 'size',			},			{				name = 'Width',				kind = 'Slider',				key = 'width',				min = 10,				max = 200,				panel = 'size',			},			{				name = 'Height',				kind = 'Slider',				key = 'height',				min = 10,				max = 200,				panel = 'size',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},		{			name = "Frame Level",			kind = "Slider",			key = "frameLevel",			panel = 'position',			min = 1,			max = 100,		},		{			name = "Frame Strata",			kind = "Slider",			key = "frameStrata",			panel = 'position',			min = 1,			max = 8,		},			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "advanced",			},			{				name = 'Tooltip',				kind = 'CheckButton',				key = 'tooltip',				panel = "advanced",			},		}	},		{ 		name = "Text",		kind = "Panel",		key = "text",		panel = "Text",		options = {			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "text",			},			{				name = 'Format',				kind = 'Menu',				key = 'format',				table = {					'none',					'value',					'current',					'full',					'deficit',					'percent',				},				panel = "text",			},			{				name = 'MouseOver Format',				kind = 'Menu',				key = 'mouseover',				table = {					'none',					'value',					'current',					'full',					'deficit',					'percent',				},				panel = "text",			},			{				name = 'Font',				kind = 'Media',				key = 'file',				mediaType = 'Font',				panel = 'text',			},			{				name = 'Size',				kind = 'Slider',				key = 'size',				min = 1,				max = 25,				panel = 'text',			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'text',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Justify Horizontal',				kind = 'Slider',				key = 'justifyH',				panel = 'text',				min = 1,				max = 3,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},		}	},	{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {			{				name = 'Rotate Texture',				kind = 'CheckButton',				key = 'rotateTexture',				panel = "texture",			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'statusbar',				panel = 'texture',			},			{				name = 'Opacity',				kind = 'Slider',				key = 'opacity',				min = 0,				max = 100,				panel = 'texture',			},			{				name = 'Orientation',				kind = 'Menu',				key = 'orientation',				panel = 'texture',				table = {					'HORIZONTAL',					'VERTICAL',					'BOTH',				},			},			{				name = 'Fill Style',				kind = 'Menu',				key = 'fillStyle',				panel = 'texture',				table = {					'STANDARD',					'REVERSE',					'CENTER',				},			},			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},			{				name = 'Vertical Padding',				kind = 'Slider',				key = 'vpadding',				min = -50,				max = 50,				panel = 'border',			},						{				name = 'Horizontal Padding',				kind = 'Slider',				key = 'hpadding',				min = -50,				max = 50,				panel = 'border',			},			{				name = 'Vertical Thickness',				kind = 'Slider',				key = 'vthickness',				min = 1,				max = 50,				panel = 'border',			},			{				name = 'Horizontal Thickness',				kind = 'Slider',				key = 'hthickness',				min = 1,				max = 50,				panel = 'border',			},			{				name = 'Border Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},							}	},} 