local bar = _G[...]local modName = ...local Llocal function Menu(menu, name, key, table, sub)	local f = CreateFrame('Frame', menu:GetName()..name, menu)	f:SetSize(24, 24)	f.button = CreateFrame('Button', f:GetName()..'Button', f)	f.dumb = CreateFrame('Frame', nil, f)	f.dumb:SetSize(24, 24)	f.dumb:SetPoint('TopLeft')	f.button:SetSize(24, 24)	f.button:SetNormalTexture('Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Up')	f.button:SetPushedTexture('Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Down')	f.button:SetDisabledTexture('Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Disabled')	f.button:SetHighlightTexture('Interface\\Buttons\\UI-Common-MouseHilight')	f.text = f:CreateFontString(f:GetName() .. 'Text', 'OVERLAY', 'GameFontHighlightSmall')	f.text:SetPoint('BottomLeft', f.button, 'BottomRight', 6, 2)	f.text:SetJustifyH('LEFT')	local title = f:CreateFontString(nil, 'OVERLAY', 'GameFontNormalSmall')	title:SetPoint('TopLeft', f.button, 'TopRight', 4, -2)	title:SetText(name)	f.title = title	f:SetScript('OnHide', function() CloseDropDownMenus() end)	f.button:SetScript('OnClick', function(self)		UIDropDownMenu_SetAnchor(f, -4, 6, 'TopLeft', f.button, 'BottomLeft')		ToggleDropDownMenu(1, nil, f)		PlaySound('igMainMenuOptionCheckBoxOn')	end)	local dropDownList = _G['DropDownList'..1]	dropDownList.dropdown = f	dropDownList.shouldRefresh = true			if sub then		f.button:SetPoint('Top', 10, 0)	else		f.button:SetPoint('Top')	end		local prev = menu.checkbutton	if prev then		f:SetPoint('TOPLEFT', prev, 'BOTTOMLEFT', 0, -0)	else		f:SetPoint('TOPLEFT', 2, -5)	end	f.point = {f:GetPoint()}	menu.checkbutton = f.dumb	f.button:SetHitRectInsets(0, 0 , 0, 0)	menu.height = menu.height + 24	return fendlocal blackList = {	point = 1,	x = 1,	y = 1,	anchor = 1,}local function Copy(source, destination, looped)	if not destination then		destination = {}	end	for i, b in pairs(CopyTable(source)) do		if (type(b) == 'table') then			destination[i] = Copy(b, destination[i], true)		else			if (not looped) and (blackList[i]) then							else				destination[i] = b			end		end	end	return destinationendlocal function GetProfiles()	return DominosDB.profilesendlocal function GetDominos()	return bar.master.db.profile.framesendlocal frames =  {}local function GetFrames(settings)	wipe(frames)		for id, info in pairs(settings.frames) do		if bar.master.IsViable(id) then			frames[id] = info		end	end		return framesendlocal function FlipHorizontal(layout, looped)	for key, value in pairs(layout) do		if not looped then			if (type(value) == 'table') then				FlipHorizontal(value, true)			end		else				if (key == 'anchor')then					if string.find(value, 'Top') then						layout[key] = string.gsub (value, 'Top', 'Bottom')					elseif string.find(value, 'Bottom') then						layout[key] = string.gsub (value, 'Bottom', 'Top')					end				end				 if (key == 'justifyV') then					if value == 1 then						layout[key] = 3					elseif  value == 3 then						layout[key] = 1					end				 end				if key == 'y' then					layout[key] = -value									end		end	endendlocal function FlipVertical(layout, looped)	for key, value in pairs(layout) do		if (type(value) == 'table') then			FlipVertical(value, true)		else			if looped then				if (key == 'anchor')then					if string.find(value, 'Left') then						layout[key] = string.gsub (value, 'Left', 'Right')					elseif string.find(value, 'Right') then						layout[key] = string.gsub (value, 'Right', 'Left')					end				end				 if (key == 'justifyH') then					if value == 1 then						layout[key] = 3					elseif  value == 3 then						layout[key] = 1					end			 end				if key == 'x' then					layout[key] = -value									end			end		end	endendlocal function AddLayoutPanel(menu)	local panel = menu:NewPanel(L.Layout)	panel.opacitySlider = panel:NewOpacitySlider()	panel.fadeSlider = panel:NewFadeSlider()	panel.paddingSlider = panel:NewPaddingSlider()	panel:NewSlider('Height', 10, 600, 1,		function(self) --Getter			self:SetValue(self:GetParent().owner.sets.height)		end,		function(self) --Setter			self:GetParent().owner.sets.height = self:GetValue()			self:GetParent().owner:Layout()		end	)	panel:NewSlider('Width', 10, 600, 1,		function(self) --Getter			self:SetValue(self:GetParent().owner.sets.width)		end,		function(self) --Setter			self:GetParent().owner.sets.width = self:GetValue()			self:GetParent().owner:Layout()		end	)		panel.scaleSlider = panel:NewScaleSlider()	return panelendlocal function AddShowState(self)	local p = self:NewPanel(L.ShowStates)	p.height = 56	local editBox = CreateFrame('EditBox', p:GetName() .. 'StateText', p, 'InputBoxTemplate')	editBox:SetWidth(148) editBox:SetHeight(20)	editBox:SetPoint('TOPLEFT', 12, -10)	editBox:SetAutoFocus(false)	editBox:SetScript('OnShow', function(self)		self:SetText(self:GetParent().owner:GetShowStates() or '')	end)	editBox:SetScript('OnEnterPressed', function(self)		local text = self:GetText()		self:GetParent().owner:SetShowStates(text ~= '' and text or nil)		self:ClearFocus()	end)	editBox:SetScript('OnEditFocusLost', function(self) self:HighlightText(0, 0) end)	editBox:SetScript('OnEditFocusGained', function(self) self:HighlightText() end)	local set = CreateFrame('Button', p:GetName() .. 'Set', p, 'UIPanelButtonTemplate')	set:SetWidth(30) set:SetHeight(20)	set:SetText(L.Set)	set:SetScript('OnClick', function(self)		local text = editBox:GetText()		self:GetParent().owner:SetShowStates(text ~= '' and text or nil)		editBox:SetText(self:GetParent().owner:GetShowStates() or '')		editBox:ClearFocus()	end)	set:SetPoint('BOTTOMRIGHT', -8, 2)	return pendlocal function AddAdvancedPanel(menu)	local panel = menu:NewPanel(L.Advanced)	panel:NewClickThroughCheckbox()	panel:NewShowInOverrideUICheckbox()	panel:NewShowInPetBattleUICheckbox()		local flipVert = bar.Menu.newButton(panel, 'Flip Vertical')	flipVert:SetScript('OnClick', function(self)		FlipVertical(panel.owner.sets)		panel.owner:Layout()	end)	local flipHori = bar.Menu.newButton(panel, 'Flip Horizontal')	flipHori:SetScript('OnClick', function(self)		FlipHorizontal(panel.owner.sets)		panel.owner:Layout()	end)	local f =  Menu(panel, 'Copy', 'profile')	local g  = Menu(panel, 'Source ', 'source', nil, true)	f:SetScript('OnShow', function(self)		g.button:Disable()		f.text:SetText('profile')		g.text:SetText('frame')		if self ~= f then			return		end		f:initialize()		if not self.stretch then			self.stretch = 1			f.button:SetHitRectInsets(0, -(f.title:GetCenter()+ (f.title:GetWidth()/2)- f.button:GetCenter()+ (f.button:GetWidth()/2)), 0, 0)		end	end)		local lay	function f:initialize()		local info = UIDropDownMenu_CreateInfo()		for profile, settings in pairs(GetProfiles()) do			wipe(info)			info.text = profile			info.func = function(item, name)				GetFrames(settings)				lay = settings				f.text:SetText(profile)				g.button:Enable()			end			info.arg1 = layout			UIDropDownMenu_AddButton(info)		end	end		function g:initialize()		local owner = panel.owner		if not lay then			return		end		local info = UIDropDownMenu_CreateInfo()		for id, layout in pairs(GetFrames(lay)) do			wipe(info)			info.text = id			info.func = function()				g.text:SetText(id)								local p = Copy(layout, GetDominos()[owner.id])				GetDominos()[owner.id] = p				owner.sets = p				owner:Reload()				owner:Layout()				owner:Rescale()				owner:Reposition()							end			info.arg1 = layout			UIDropDownMenu_AddButton(info)		end	end	local b = bar.Menu.newButton(panel, 'Delete Frame')	b:SetScript('OnClick', function(self)		if not b.clicked then			b.clicked = true			b:SetText('Are you sure?')		else			bar.master.db.profile.units.frames[panel.owner.id] = nil			local frames = bar.frames			if panel.owner then				panel.owner:Delete()				panel.owner.frameOverlay:Hide()			end			if LibStub and LibStub('LibKeyBound-1.0') then				LibStub('LibKeyBound-1.0'):Deactivate()			end			bar.master:GetModule('ConfigOverlay'):Show()			bar.menu:Hide()		end	end)	return panelendfunction bar:CreateMenu()	local menu = bar.master:NewMenu(self.id)	local panel = AddLayoutPanel(menu)	if self.components then		for i, b in pairs(self.components) do			if b.CreateMenu and bar.Menu then				b:CreateMenu(menu)			end		end	end	AddShowState(menu)	AddAdvancedPanel(menu)	return menuendlocal menu, configfunction bar:ShowMenu()	if not bar.master:IsConfigAddonEnabled() then return end	config = config or LoadAddOn('Dominos_Config')	L = L or LibStub('AceLocale-3.0'):GetLocale('Dominos-Config')	bar.menu = bar.menu or self:CreateMenu()	local menu = bar.menu	menu:Hide()	menu:SetOwner(self)	menu:ShowPanel(L.Layout)	menu:Show()end