local bar = _G[...]local modName = ...--Casting Barlocal component = bar:NewComponent('cast', 'StatusBar')function component:New(parent)	local name = ('%s_%s_CastingBar'):format(modName, parent.id)	if _G[name] then		return _G[name]	end	local opac = CreateFrame('Frame', nil, parent.box)--opacity control	local bar = self:Bind(CreateFrame('StatusBar', name, opac, 'CastingBarFrameTemplate'))	bar.owner = parent	bar.opac = opac	bar:Hide()	bar:SetAttribute('unit', parent.id)	CastingBarFrame_SetLook(bar, 'UNITFRAME')	bar.text:SetHeight(12)	bar.id = parent.id	bar.time = 	bar.time or 	bar:CreateFontString(nil, 'OVERLAY', 'TextStatusBarText')	bar.time:SetTextColor(1.0,1.0,1.0)	bar.time:SetAllPoints(	bar)	bar.drop = 	bar.drop or CreateFrame('Frame', 	bar:GetName()..'backdrop', parent.box)	bar.drop:SetPoint('TopLeft', 	bar)	bar.drop:SetPoint('BottomRight', 	bar)				bar.border:SetParent(MainMenuBarArtFrame)	bar.borderShield:SetParent(MainMenuBarArtFrame)	bar.icon:SetParent(MainMenuBarArtFrame)	bar.barFlash:SetParent(MainMenuBarArtFrame)	return barendcomponent.defaults = {	frameLevel = 2,	frameLayer = 3,	scale = 100,	alpha = 100,	width = 106,	y = 18,	x = 0,	anchor = 'BottomRight',	height = 34,	enable = true,	showBG = false,	textheight = 26,	texturePath = 'Interface\\TargetingFrame\\UI-StatusBar',	textureName = 'Blizzard',}local layers = {	'BACKGROUND',	'LOW',	'MEDIUM',	'HIGH',	'DIALOG',	'FULLSCREEN',	'FULLSCREEN_DIALOG',	'TOOLTIP',}function component:Load()	CastingBarFrame_OnLoad (self, self.id)	self:SetScript('OnShow', self.OnShow)	self:SetScript('OnEvent', nil)	self:Show()endfunction component:Layout()	local sets = self.sets	if sets.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:ClearAllPoints()	self:SetPoint(sets.anchor, self:GetParent():GetParent(), sets.x, sets.y)	local w, h = self:GetParent():GetParent():GetSize()	local width, height = w*(sets.width/100), h*(sets.height/100)	self:SetSize(width, height)	if sets.scale < 25 then		sets.scale = sets.scale *100	end	self:SetScale(sets.scale/100)	self.opac:SetAlpha(sets.alpha/100)	local anchor = sets.anchor	local hori = 'CENTER' -- 'LEFT','RIGHT', or 'CENTER'	local vert = 'MIDDLE' -- 'TOP','BOTTOM', or 'MIDDLE'	local H, V = 'RIGHT', 'MIDDLE'			self.text:ClearAllPoints()	self.text:SetPoint(anchor)					if string.find(anchor, 'Left') then		hori = 'LEFT'		H = 'RIGHT'	elseif string.find(anchor, 'Right') then		hori = 'RIGHT'		H = 'LEFT'	end			if string.find(anchor, 'Top') then		vert = 'TOP'		V = 'TOP'	elseif string.find(anchor, 'Bottom') then		vert = 'BOTTOM'		V = 'BOTTOM'	end	if V == 'MIDDLE' then		V = 'CENTER'	end	self.text:SetJustifyH(hori) -- Sets horizontal text justification ('LEFT','RIGHT', or 'CENTER')	self.text:SetWidth(self:GetWidth()-24)	self.time:SetJustifyH(H)	self.time:SetJustifyV(V)	self.text:SetHeight(sets.textheight)	if self.sets.showBG then		self.drop:SetBackdrop(self.bg)	else		self.drop:SetBackdrop(nil)	end	local lay = layers[sets.frameLayer]	self:SetFrameStrata(lay)	self:SetFrameLevel(sets.frameLevel)	self.drop:SetFrameStrata(lay)	self.drop:SetFrameLevel(sets.frameLevel)		self:SetStatusBarTexture(self:GetMediaPath('statusbar', self.sets.textureName) or self.sets.texturePath)endfunction component:GetMediaPath(kind, fileName)	if bar.lib then		self.sets.texturePath = bar.lib and bar.lib:Fetch(kind, fileName)	end	return (bar.lib and bar.lib:Fetch(kind, fileName))endfunction component:Update(elapsed)	if self.noUpdate then		return	end	local curGUID = UnitGUID(self.id)	if (curGUID ~= self.lastGUID) or not curGUID then		if self.lastGUID then			self:GetScript('OnShow')(self)		end		if not curGUID then			return		end	end		local kind, name, subText, text, texture, startTime, endTime, _,  castID = self:isCasting()	self.seconds = self.seconds or ''			if kind then		--Events to mimmick		--cast start		--cast delayed		--channel Start		if kind == 'cast' then			if not self.startTime then 				CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_START', self.id, name, nil, castID, select( 7, GetSpellInfo(name)))			else				if self.endTime ~= endTime then					CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_DELAYED', self.id, self.spellname, nil, self.castID, self.spellID)				end			end		elseif kind == 'channel' then			CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_CHANNEL_START', self.id, name, 0, select( 7, GetSpellInfo(name)))		end		self.begin = self.begin or GetTime()		self.kind = kind		self.spellID = select( 7, GetSpellInfo(name))		self.startTime = startTime		self.endTime = endTime		self.spellname = name		if kind == 'cast' then			self.castID = castID		else			self.castID = castID or 0		end		self.stop = nil	elseif self.kind then		local time = GetTime()		if ((time) < ((self.endTime/1000) - .5)) then			if self.kind == 'cast' then				CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_INTERRUPTED', self.id, self.spellname, nil, self.castID, self.spellID)				self.casting = false			elseif self.kind == 'channel' then				CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_CHANNEL_STOP', self.id, self.spellname, nil, self.castID, self.spellID)				self.channeling = false			end		else			if self.kind == 'cast' then				CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_STOP', self.id, self.spellname, nil, self.castID, self.spellID)				self.casting = false			elseif self.kind == 'channel' then				CastingBarFrame_OnEvent (self, 'UNIT_SPELLCAST_CHANNEL_STOP', self.id, self.spellname, nil, self.castID, self.spellID)				self.channeling = false			end		end		self.kind = nil		self.spellID = nil		self.startTime = nil		self.endTime = nil		self.spellname = nil		self.begin = nil		self.seconds = ''		self.stop = true	end	if self.stop then		self.time:SetText('')	else		if self.endTime then			self.seconds = string.format('%.1f' ,(self.endTime / 1000) - GetTime())			self.time:SetText(self.seconds)		end	end	self.lastGUID = curGUIDendfunction component:isCasting()	if UnitCastingInfo(self.id) then		return 'cast', UnitCastingInfo(self.id)	elseif UnitChannelInfo(self.id) then		return 'channel', UnitChannelInfo(self.id)	endendcomponent.bg = {	bgFile = 'Interface\\Tooltips\\UI-Tooltip-Background',	insets = {left = 0, right = 0, top = 0, bottom = 0},	tile = false,}function component:OnShow()	local kind,_, _, _, _, startTime, endTime = self:isCasting()		if (kind == 'cast') then		if ( startTime ) then			self.value = (GetTime() - (startTime / 1000))		end	elseif (kind == 'channel') then		if ( endTime ) then			self.value = ((endTime / 1000) - GetTime())		end	else		self.fadeOut = 0		self.holdTime = 0		self:Hide()	endendfunction component:UpdateValue(key, value)	self.sets[key] = value	self:Layout()endfunction component:GetValue(key)	return self.sets[key]endlocal anchors = {	'TopLeft',	'Top',	'TopRight',	'Right',	'BottomRight',	'Bottom',	'BottomLeft',	'Left',	'Center',}local options = {	{		name = 'Anchor',		kind = 'Menu',		key = 'anchor',		table = anchors,	},	{		name = 'Frame Level',		kind = 'Slider',		key = 'frameLevel',		min = 1,		max = 100,	},		{		name = 'Frame Layer',		kind = 'Slider',		key = 'frameLayer',		min = 1,		max = 8,	},	{		name = 'Enable',		kind = 'CheckButton',		key = 'enable',	},	{		name = 'Text Height',		kind = 'Slider',		key = 'textheight',		min = 12,		max = 240,		step = 14,	},	{		name = 'X Offset',		kind = 'Slider',		key = 'x',		min = -400,		max = 400,	},	{		name = 'Y Offset',		kind = 'Slider',		key = 'y',		min = -400,		max = 400,	},	{		name = 'Width',		kind = 'Slider',		key = 'width',		min = 10,		max = 400,	},	{		name = 'Height',		kind = 'Slider',		key = 'height',		min = 10,		max = 400,	},	{		name = 'Scale',		kind = 'Slider',		key = 'scale',		min = 25,		max = 250,	},	{		name = 'Opacity',		kind = 'Slider',		key = 'alpha',		min = 0,		max = 100,	},		{		name = 'Backdrop',		kind = 'CheckButton',		key = 'showBG',	},	{		name = 'Texture',		kind = 'Media',		key = 'textureName',		mediaType = 'StatusBar',		handler = 'cast',	},}function component:CreateMenu(menu)	return bar.Menu.NewPanel(menu, 'Cast', options)end