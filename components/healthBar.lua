local AddonName = "Dominos"local Addon = LibStub('AceAddon-3.0'):GetAddon(AddonName)local Lib = LibStub('LibSharedMedia-3.0', true)local HealthBar = Addon:CreateClass('StatusBar')Addon.HealthBar = HealthBarfunction HealthBar:New(parent)	local name = ('%s_%s_HealthBar'):format(AddonName, parent.id)	if _G[name] then		return _G[name]	end	local bar = self:Bind(CreateFrame('StatusBar', ('%s_%s_HealthBar'):format(AddonName, parent.id), parent.box, "TextStatusBar"))	bar.owner = parent	bar:SetStatusBarTexture("Interface\\RaidFrame\\Raid-Bar-Hp-Fill", "BORDER")	bar:SetStatusBarColor(0,1,0,1)	bar:SetBackdrop( {bgFile = "Interface\\QUESTFRAME\\UI-TextBackground-BackdropBackground"})	bar:EnableMouse(false)	bar:Show()	bar:SetScript("OnEnter", nil)	bar.textHandler = CreateFrame("Frame", nil, bar)	bar.text = bar.text or bar.textHandler:CreateFontString(nil, "OVERLAY", "TextStatusBarText")	bar.text:SetTextColor(1.0,1.0,1.0)	bar.text:SetAllPoints(true)	bar.textHandler:SetAllPoints(true)	bar.textHandler:SetFrameLevel(70)	return barendHealthBar.defaults = {	scale = 100,	height = 25,	justifyV = "CENTER",	width = 100,	y = 0,	x = 0,	justifyH = "CENTER",	drop = true,	anchor = "Top",	enable = true,	percent = true,	alpha = 100,	format = "value",}function HealthBar:Layout()	local sets = self.sets	if sets.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	local sets = self.sets	self:Reposition()	self:Rescale()		local w, h = self:GetParent():GetSize()	local width, height = w*(sets.width/100), h*(sets.height/100)	self:SetSize(width, height)			self.text:SetJustifyH(sets.justifyH) -- Sets horizontal text justification ("LEFT","RIGHT", or "CENTER")	self.text:SetJustifyV(sets.justifyV) -- Sets vertical   text justification ("TOP","BOTTOM", or "MIDDLE")	self:SetAlpha(sets.alpha/100)	if sets.drop then		self:SetBackdrop( {bgFile = "Interface\\QUESTFRAME\\UI-TextBackground-BackdropBackground"})	else		self:SetBackdrop(nil)	endend-- Format Number Valuelocal function FormatValue(val)	if (val < 1000000) then		return ("%.1fk"):format(val / 1000);	elseif (val < 1000000000) then		return ("%.2fm"):format(val / 1000000);	else		return ("%.2fg"):format(val / 1000000000);	endend-- Format Bar Textlocal function FormatBarValues(fs,val,max,type)	if (type == "none") then		fs:SetText("");	elseif (type == "value") or (max == 0) then -- max should never be zero, but if it is, dont let it pass through to the "percent" type, or there will be an error		fs:SetFormattedText("%s / %s",FormatValue(val),FormatValue(max));	elseif (type == "current") then		fs:SetFormattedText("%s",FormatValue(val));	elseif (type == "full") then		fs:SetFormattedText("%s / %s (%.0f%%)",FormatValue(val),FormatValue(max),val / max * 100);	elseif (type == "deficit") then		if (val ~= max) then			fs:SetFormattedText("-%s",FormatValue(max - val));		else			fs:SetText("");		end	elseif (type == "percent") then		fs:SetFormattedText("%.0f%%",val / max * 100);	endendfunction HealthBar:Update()	if self.noUpdate then		return	end	local unit = self.owner.id	local max = UnitHealthMax(unit)	local current = UnitHealth(unit)	local dead = UnitIsGhost(unit) or UnitIsDead(unit)	local sets = self.sets		if dead then		self:SetMinMaxValues(0, 1)		self:SetValue(0)		self.text:SetText('')		return	end	if (max ~= self.lastMax)then		self:SetMinMaxValues(0, max)	end	self.LastMax = max	if (current ~= self.lastCurrent)then		self:SetValue(current)		FormatBarValues(self.text, current, max, self.sets.format)	end	self.lastCurrent = current	local r, g, b	if not UnitIsConnected(unit) then		r, g, b = .5, .5, .5	else		if self.sets.classColor then			local localizedClass, englishClass = UnitClass(unit)			local classColor = RAID_CLASS_COLORS[englishClass]			if ( classColor ) then --and self:GetParent().sets.useClassColors ) then				r, g, b = classColor.r, classColor.g, classColor.b			else			end		else			if ( UnitIsFriend("player", unit) ) then				r, g, b = 0.0, 1.0, 0.0			else				r, g, b = 1.0, 0.0, 0.0			end		end	end	if dead then		r, g, b = r-.75, g-.75, b-.75	end	if ( r ~= self.r or g ~= self.g or b ~= self.b) then		self:SetStatusBarColor(r, g, b)		self.r, self.g, self.b = r, g, b	endendfunction HealthBar:Rescale()	self:SetScale(self.sets.scale/100)endfunction HealthBar:Reposition()	self:ClearAllPoints()	local x = self.sets.x/(self.sets.scale/100)	local y = self.sets.y/(self.sets.scale/100)	self:SetPoint(self.sets.anchor, self:GetParent(), x, y)endlocal anchors = {	"TopLeft",	"Top",	"TopRight",	"Right",	"BottomRight",	"Bottom",	"BottomLeft",	"Left",	"Center",}local layers = {	'BACKGROUND',	'LOW',	'MEDIUM',	'HIGH',	'DIALOG',	'FULLSCREEN',	'FULLSCREEN_DIALOG',	'TOOLTIP',}local options = {	{		name = "Enable",		kind = "CheckButton",		key = "enable",	},	{		name = "Anchor",		kind = "Menu",		key = "anchor",		table = anchors,	},	{		name = "Format",		kind = "Menu",		key = "format",		table = {			'none',			'value',			'current',			'full',			'deficit',			'percent',		},	},	{		name = "Class Colored",		kind = "CheckButton",		key = "classColor",	},	{		name = "Backdrop",		kind = "CheckButton",		key = "drop",	},	{		name = "Opacity",		kind = "Slider",		key = "alpha",		min = 0,		max = 100,	},	{		name = "X Offset",		kind = "Slider",		key = "x",		min = -400,		max = 400,	},	{		name = "Y Offset",		kind = "Slider",		key = "y",		min = -400,		max = 400,	},	{		name = "Width",		kind = "Slider",		key = "width",		min = 5,		max = 250,	},	{		name = "Height",		kind = "Slider",		key = "height",		min = 5,		max = 250,	},	{		name = "Scale",		kind = "Slider",		key = "scale",		min = 25,		max = 250,	},		}local opts = Dominos.Options	function HealthBar:GetPanel(menu)	if not opts.create then		return	end	local panel = opts.create.Panel(menu, "Health", options)	return panelendlocal unitBar = Dominos[...]unitBar:AddPart("health", function(parent)	return HealthBar:New(parent)end)