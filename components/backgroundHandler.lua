local AddonName = "Dominos"local Addon = LibStub('AceAddon-3.0'):GetAddon(AddonName)local BackgroundHandler = Addon:CreateClass('Frame')Addon.BackgroundHandler = BackgroundHandlerlocal Lib = LibStub('LibSharedMedia-3.0', true)function BackgroundHandler:New(parent)	local name = ('%s_%s_BackgroundHandler'):format(AddonName, parent.id)	if _G[name] then		return _G[name]	end	local button = self:Bind(CreateFrame('Frame', ('%s_%s_BackgroundHandler'):format(AddonName, parent.id), parent.box))	if button then		button.owner = parent	end	return buttonendBackgroundHandler.defaults = {	textureName = "Blizzard Tooltip",	texturePath = "Interface\\Tooltips\\UI-Tooltip-Background",	color = {		a = 1,		b = 0,		g = 0.411764705882353,		r = 0.0509803921568627,	},	bgPad = 0,	edgecolor = {		a = 100,		r = 100,		g = 100,		b = 100,	},	edgeFile = "Interface\\ACHIEVEMENTFRAME\\UI-Achievement-WoodBorder",	enable = true,	inset = 0,	edgeSize = 13,	x = 0,	y = 0,	anchor = "Center",	height = 100,	width = 100,	y = 0,	x = 0,	scale = 100,}function BackgroundHandler:Load()	self:SetAllPoints(self.owner)	self:SetFrameLevel(1)	self:Show()endfunction BackgroundHandler:Rescale()	self:SetScale(self.sets.scale/100)endfunction BackgroundHandler:Reposition()	self:ClearAllPoints()	local x = self.sets.x/(self.sets.scale/100)	local y = self.sets.y/(self.sets.scale/100)	self:SetPoint(self.sets.anchor, self:GetParent(), x, y)endfunction BackgroundHandler:Layout()	self:SetBackdrop({		bgFile = self:GetTexture(),		insets = {left = -self.sets.inset, right = -self.sets.inset, top = -self.sets.inset, bottom = -self.sets.inset},		tile = false,	})	self:SetBackdropColor(self.sets.color.r, self.sets.color.g, self.sets.color.b, self.sets.color.a)	if self.sets.enable == true then		self:SetAlpha(1)	else		self:SetAlpha(0)	end		local sets = self.sets	self:Reposition()	self:Rescale()		local w, h = self:GetParent():GetSize()	local width, height = w*(sets.width/100), h*(sets.height/100)	self:SetSize(width, height)	self:ClearAllPoints()	self:SetPoint(sets.anchor, self:GetParent():GetParent(), sets.x, sets.y)endfunction BackgroundHandler:GetTexture()	local r = Lib and Lib:Fetch("background", self.sets.textureName)	return r or "Interface\\Tooltips\\UI-Tooltip-Background"endfunction BackgroundHandler:Update()    if ( not UnitPlayerControlled(self.owner.id) and UnitIsTapped(self.owner.id) and not UnitIsTappedByPlayer(self.owner.id) and not UnitIsTappedByAllThreatList(self.owner.id) ) then        self:SetBackdropColor(0.5, 0.5, 0.5)    else        self:SetBackdropColor(self.sets.color.r, self.sets.color.g, self.sets.color.b, self.sets.color.a)    endendlocal anchors = {	"TopLeft",	"Top",	"TopRight",	"Right",	"BottomRight",	"Bottom",	"BottomLeft",	"Left",	"Center",}local options = {	{		name = "Enable",		kind = "CheckButton",		key = "enable",	},	{		name = "Anchor",		kind = "Menu",		key = "anchor",		table = anchors,	},	{		name = "Color",		kind = "ColorPicker",		key = "color",		handler = "background",	},	{		name = "Padding",		kind = "Slider",		key = "inset",		min = -30,		max = 30,		step = 1,	},	{		name = "Texture",		kind = "Media",		mediaType = "Background",		key = "textureName",		handler = "background"	},	{		name = "X Offset",		kind = "Slider",		key = "x",		min = -400,		max = 400,	},	{		name = "Y Offset",		kind = "Slider",		key = "y",		min = -400,		max = 400,	},	{		name = "Width",		kind = "Slider",		key = "width",		min = 5,		max = 250,	},	{		name = "Height",		kind = "Slider",		key = "height",		min = 5,		max = 250,	},}local opts = Dominos.Optionsfunction BackgroundHandler:GetPanel(menu)	if not opts.create then		return	end	BackgroundHandler.panel = BackgroundHandler.panel or opts.create.Panel(menu, "Background", options)		return BackgroundHandler.panelendlocal unitBar = Dominos[...]unitBar:AddPart("background", function(parent)	return BackgroundHandler:New(parent)end)