local bar = _G[...]local modName = ...--Focus Buttonlocal component = bar:NewComponent('focus', 'Button')function component:New(parent)	local name = ('%s_%s_FocusButton'):format(modName, parent.id)	if _G[name] then		return _G[name]	end	local button = self:Bind(CreateFrame('Button', name, parent.box, 'SecureActionButtonTemplate'))	button.owner = parent	button.icon = button:CreateTexture(nil, 'ARTWORK')	button.icon:SetAllPoints(button)		button:SetFrameLevel(parent:GetFrameLevel()+ 10)	button:SetSize(64, 64)	button.icon:SetTexture([[Interface\Addons\]]..modName..[[\Focus]])	return buttonendcomponent.defaults = {	y = 0,	x = 0,	enable = true,	anchor = 'Left',	scale = 95,	alpha = 100,	usePortrait = true,}function component:Load()	self:SetAttribute('unit', self.owner.id)	self:RegisterForClicks('AnyUp')	self:SetAttribute('*type1', 'target')				if self.owner.id ~= 'focus' then		self:SetAttribute('*type2', 'focus')		self.Tooltip = 'Right-Click to Set Focus.'	else		self:SetAttribute('*type2', 'macro')		self:SetAttribute('macrotext', '/clearfocus')		self.Tooltip = 'Right-Click to Clear Focus.'	end	if not self.masqued then		self.masqued = true		local self = self		--bar.master:GetModule('ButtonThemer'):Register(self, 'Focus Macros', { Icon = self.icon, Border = self.IconBorder })	end	self:Show()	self:EnableMouse(true)	self:SetScript('OnEnter', self.OnEnter)endfunction component:Layout()	local sets = self.sets	if sets.enable ~= true then		self:Hide()		self.noUpdate = true		self:SetText('')		return	else		self:Show()		self.noUpdate = nil	end	self:ClearAllPoints()	local x = self.sets.x/(self.sets.scale/100)	local y = self.sets.y/(self.sets.scale/100)		self:SetPoint(sets.anchor, self:GetParent(), x, y)	if sets.scale < 25 then		sets.scale = sets.scale *100	end	self:SetScale(sets.scale/100)	self:SetAlpha(sets.alpha/100)endfunction component:Update()	local sets = self.sets		if sets.usePortrait then		SetPortraitTexture(self.icon, self.owner.id)		if (not self.icon:GetTexture()) or (self.icon:GetTexture() == "") then			self.icon:SetTexture([[Interface\Addons\]]..modName..[[\Focus]])		end		self.icon:SetVertexColor(1, 1, 1)	else		local localizedClass, englishClass = UnitClass(self.owner.id)		local classColor = RAID_CLASS_COLORS[englishClass]		if classColor then			r, g, b = classColor.r, classColor.g, classColor.b		else			r, g, b = 1, 1, 1		end		if self.icon:GetTexture() ~= [[Interface\Addons\]]..modName..[[\Focus]] then			self.icon:SetTexture([[Interface\Addons\]]..modName..[[\Focus]])		end		self.icon:SetVertexColor(r, g, b)	end	endfunction component:OnEnter()	UnitFrame_OnEnter(self:GetParent())	GameTooltip:AddLine(self.Tooltip)	GameTooltip:AppendText('')endlocal anchors = {	'TopLeft',	'Top',	'TopRight',	'Right',	'BottomRight',	'Bottom',	'BottomLeft',	'Left',	'Center',}local layers = {	'BACKGROUND',	'LOW',	'MEDIUM',	'HIGH',	'DIALOG',	'FULLSCREEN',	'FULLSCREEN_DIALOG',	'TOOLTIP',}local options = {	{		name = 'Anchor',		kind = 'Menu',		key = 'anchor',		table = anchors,	},	{		name = 'Enable',		kind = 'CheckButton',		key = 'enable',	},	{		name = 'Opacity',		kind = 'Slider',		key = 'alpha',		min = 0,		max = 100,	},	{		name = 'X Offset',		kind = 'Slider',		key = 'x',		min = -400,		max = 400,	},	{		name = 'Y Offset',		kind = 'Slider',		key = 'y',		min = -400,		max = 400,	},	{		name = 'Scale ',		kind = 'Slider',		key = 'scale',		min = 25,		max = 250,	},	{		name = 'Portrait Icon',		kind = 'CheckButton',		key = 'usePortrait',	}}function component:CreateMenu(menu)	return bar.Menu.NewPanel(menu, 'Focus', options)end