local Addon = _G[...]local modName = ...local title = "Threat"local widget = Addon:NewWidget(title, 'Frame')widget.defaults = {	visibility = {		border = {			hpadding = -32,			vpadding = -7,			hthickness = 15,			y = 2,			x = 1,			vthickness = 17,			file = "Threat",			enable = true,			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},		background = {			hpadding = 4,			vpadding = 6,			enable = true,			file = "Armory",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},	},	fontcolor = {		a = 1,		r = 1,		g = 1,		b = 0,	},	basic = {		position = {			y = 4,			x = -74,			frameLevel = 4,			anchor = "TopRight",			frameStrata = 2,		},		text = {			enable = true,			file = "Friz Quadrata TT",			color = {				a = 1,				b = 0,				g = 1,				r = 1,			},			size = 9,		},	},}function widget:New(parent)		local name = ('%s_%s_'..title):format(modName, parent.id)--	if _G[name] then return _G[name] end	local bar = self:Bind(CreateFrame("Frame",nil, parent.box))	bar:Show()		bar.text = bar.text or bar:CreateFontString(nil, 'ARTWORK', 'TextStatusBarText')	bar:SetAllPoints(bar.text)	bar.text:SetText("200%")		bar.borderHandler = CreateFrame("Frame", nil, bar)	bar.border = {}	bar.border.TL 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	bar.border.L 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	bar.border.BL 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	bar.border.B 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')		bar.border.BR 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	bar.border.R 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	bar.border.TR 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	bar.border.T 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')		bar.border.C 	= bar.borderHandler:CreateTexture(nil, 'ARTWORK')	local v = bar:GetFrameLevel()+2	if v < 1 then v = 1 end		bar.borderHandler:SetFrameLevel(v)		bar.background = bar.background or bar:CreateTexture(nil, 'ARTWORK')	bar.owner = parent	bar.title = title	bar.handler = parent.id	return barendfunction widget:Layout()	if self.sets.basic.text.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:LayoutText()	self:SetVisibility()	self:SetBorder()	self:Update()endfunction widget:Reposition()	local sets = self.sets.basic.position	self:SetAllPoints(self.text)	self.text:ClearAllPoints()	self.text:SetPoint(sets.anchor, self:GetParent(), sets.x, sets.y)		local lay = Addon.layers[sets.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(sets.frameLevel)	endfunction widget:LayoutText()	local text = self.text	local sets = self.sets.basic.text	self.text:SetFont(self:GetMediaPath("font", sets.file), sets.size or 12)	self.text:SetTextColor(sets.color.r, sets.color.g, sets.color.b, sets.color.a)endfunction widget:SetBorder()	local sets = self.sets.visibility.border		local file = self:GetMediaPath("castborder", sets.file)	local hpad, vpad = sets.hpadding+43, sets.vpadding + 16	local x, y = sets.x, sets.y	local v, h = sets.vthickness, sets.hthickness		local border = self.border	local handle = self.borderHandler	for i, b in pairs(border) do		if sets.enable then			b:Show()		else			b:Hide()		end		b:ClearAllPoints()		b:SetTexture(file)	end	handle:ClearAllPoints()	handle:SetPoint("TopLeft", self, -hpad + x, vpad + y)	handle:SetPoint("BottomRight", self, hpad + x, -vpad + y)	local TL, L, BL, T, C, B, TR, R, BR = border.TL, border.L, border.BL, border.T, border.C, border.B, border.TR, border.R, border.BR	TL:SetPoint("TopLeft", handle)	TL:SetPoint("BottomRight", handle, "TopLeft", h, -v)	BL:SetPoint("BottomLeft", handle)	BL:SetPoint("TopRight", handle, "BottomLeft", h, v)	L:SetPoint("TopLeft", TL, "BottomLeft")	L:SetPoint("BottomRight", BL, "TopRight")	TR:SetPoint("TopRight", handle, "TopRight")	TR:SetPoint("BottomLeft", handle, "TopRight", -h, -v)	BR:SetPoint("BottomRight", handle)	BR:SetPoint("TopLeft", handle, "BottomRight", -h, v)	R:SetPoint("TopLeft", TR, "BottomLeft")	R:SetPoint("BottomRight", BR, "TopRight")		T:SetPoint("TopLeft", TL, "TopRight")	T:SetPoint("BottomRight", TR, "BottomLeft")	B:SetPoint("TopLeft", BL, "TopRight")	B:SetPoint("BottomRight", BR, "BottomLeft")		C:SetPoint("TopLeft", TL, "BottomRight")	C:SetPoint("BottomRight", BR, "TopLeft")	local Top_Start = 0	local Bottom_Stop = 1		local CH_Start = 37/256	local CH_Stop = 1 - (37/256)		local CV_Start = 25/64	local CV_Stop = 1- (25/64)		local Left_Start = 0	local Right_Stop = 1	if sets.flip == true then		Top_Start = 1		CV_Start = 1- (25/64)		CV_Stop = 25/64		Bottom_Stop = 0	end		--left, right, top, bottom	TL:SetTexCoord(Left_Start, CH_Start,   Top_Start, CV_Start)	L :SetTexCoord(Left_Start, CH_Start,   CV_Start,  CV_Stop)	BL:SetTexCoord(Left_Start, CH_Start,   CV_Stop,   Bottom_Stop)	T:SetTexCoord( CH_Start,   CH_Stop,    Top_Start, CV_Start)	C:SetTexCoord( CH_Start,   CH_Stop,    CV_Start,  CV_Stop)	B:SetTexCoord( CH_Start,   CH_Stop,    CV_Stop,   Bottom_Stop)	TR:SetTexCoord( CH_Stop,    Right_Stop, Top_Start, CV_Start)	R:SetTexCoord( CH_Stop,    Right_Stop, CV_Start,  CV_Stop)	BR:SetTexCoord( CH_Stop,    Right_Stop, CV_Stop,   Bottom_Stop)	endfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:SetVisibility()	local sets = self.sets.visibility.background	local color = sets.color	local file = self:GetMediaPath("statusbar", sets.file)	if not sets.enable then		file = ""	end	self.background:ClearAllPoints()	self.background:SetPoint("TopLeft" , -sets.hpadding, sets.vpadding)	self.background:SetPoint("BottomRight" , sets.hpadding, -sets.vpadding)	self.background:SetTexture(file)	self.background:SetVertexColor(color.r, color.g, color.b, color.a)endfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate()	local unit = self.owner.id	local threat = self:GetThreat()	self.text:SetText(threat)endfunction widget:GetThreat()    local feedbackUnit, unit  = 'player', self.owner.id	local threat = ""	if (UnitClassification(unit) ~= "minus") and     ( ShowNumericThreat() and not (UnitClassification(self.owner) == "minus") ) and	 (feedbackUnit and unit) and (UnitName(feedbackUnit) ~= UnitName(unit)) and  (not UnitIsDead(unit)) and (UnitExists(unit)) then        local isTanking, status, percentage, rawPercentage = UnitDetailedThreatSituation(feedbackUnit, unit);        local display = rawPercentage;        if ( isTanking ) then            display = UnitThreatPercentageOfLead(feedbackUnit, unit);        end		if ( display and display ~= 0 ) then			local plus = ""			if display > 250 then				display = 250				plus = " +"			end			threat = format("%1.0f", display).."%"..plus		end	end	if self.TEST then		threat = '200% +'	end		if (not threat) or (threat=="") then		self:Hide()	else		self:Show()	end		return threatendwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Font',				kind = 'Media',				key = 'file',				mediaType = 'Font',				panel = 'text',			},			{				name = 'Size',				kind = 'Slider',				key = 'size',				min = 1,				max = 25,				panel = 'text',			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'text',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "text",			},			{				kind = "Button",				name = "Test Mode",				handler = "threat",				func = function(owner)					owner.TEST = not owner.TEST					owner:Layout()				end,				panel = "text",			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},					{						name = 'texture',						kind = 'Media',						key = 'file',						mediaType = 'Statusbar',						panel = "background",					},					{						name = 'texture',						kind = 'Media',						key = 'file',						mediaType = 'Castborder',						panel = "border",					},			                    {                        name = 'Enable',                        kind = 'CheckButton',                        key = 'enable',						panel = "border",                    },			{				name = 'Vertical Padding',				kind = 'Slider',				key = 'vpadding',				min = -50,				max = 50,				panel = 'background',			},				{				name = 'Horizontal Padding',				kind = 'Slider',				key = 'hpadding',				min = -50,				max = 50,				panel = 'background',			},				{				name = 'Flip',				kind = 'CheckButton',				key = 'flip',				panel = "border",			},			{				name = 'X',				kind = 'Slider',				key = 'x',				min = -50,				max = 50,				panel = 'border',			},				{				name = 'Y',				kind = 'Slider',				key = 'y',				min = -50,				max = 50,				panel = 'border',			},				{				name = 'Vertical Padding',				kind = 'Slider',				key = 'vpadding',				min = -50,				max = 50,				panel = 'border',			},						{				name = 'Horizontal Padding',				kind = 'Slider',				key = 'hpadding',				min = -50,				max = 50,				panel = 'border',			},			{				name = 'Vertical Thickness',				kind = 'Slider',				key = 'vthickness',				min = 1,				max = 50,				panel = 'border',			},			{				name = 'Horizontal Thickness',				kind = 'Slider',				key = 'hthickness',				min = 1,				max = 50,				panel = 'border',			},		}	},	}