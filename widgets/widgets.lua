local Addon = _G[...]local pieces = {}local onEnter = function(self)	self.sets.alpha = self.sets.alpha or 100	self:SetAlpha(self.sets.alpha/100 or 1)endlocal onLeave = function(self)	self.sets.fadeAlpha = self.sets.fadeAlpha or 100	self:SetAlpha(self.sets.fadeAlpha/100 or 1)end--Basics that all widgets sharelocal function Hook(frame)	if not frame.hooked then		frame.hooked = true	else		return	end	local def = frame.defaults	if frame:HasScript("OnEnter") and frame.sets then		local enter = frame:GetScript("OnEnter")		if enter then			frame:HookScript("OnEnter", onEnter)		else			frame:SetScript("OnEnter", onEnter)		end	end	if frame:HasScript("OnLeave") and frame.sets then		local leave = frame:GetScript("OnLeave")		if leave then			frame:HookScript("OnLeave", onLeave)		else			frame:SetScript("OnLeave", onLeave)		end	end		hooksecurefunc(frame, "Layout", function(self)		if (not self.sets) or InCombatLockdown() then			return		end		if self.key ~= "focus" then			self:EnableMouse(false)		end	end)endlocal allWidgets = {}Addon.allWidgets = allWidgetsfunction Addon:Load()	self.widgets = self.widgets or {}	for i, info in pairs(Addon.Copy(pieces)) do		local allow = true		if info.func.GetRestrictions then			local id, include = info.func.GetRestrictions()			if (include == true) then				if id ~= string.lower(self.id) then					allow = false				end			elseif include == false then				if id == string.lower(self.id) then					allow = false				end			end		end		if allow then			local widget, key = self[info.id] or info.func:New(self), info.id			if widget then				widget.key = key				if widget.defaults then					self.sets[key] = self.sets[key] or {}					self.check(widget.defaults, self.sets[key])					widget.sets = self.sets[key]					self[key] = widget					tinsert(allWidgets, widget)				end				widget.ID = self.id				tinsert(self.widgets, widget)			end		end	end	for id, widget in pairs(self.widgets) do		if widget.Load then			widget:Load()		end	endendlocal template = {}function template:CreateMenu(menu)	if self.Options then		Addon.Menu.NewMenu(self, menu, string.lower(self.title), Addon.Copy(self.Options))	endendfunction template:GetRestrictions() endfunction template:GetDefault(setting)	local defs = Addon.Copy(self.defaults)	return defs[setting]endfunction template:GetSettings()	return self.sets or Addon.Copy(self.defaults)endfunction template:GetSetting(setting)	local sets = self:GetSettings()	local defs = Addon.Copy(self.defaults)	sets[setting] = sets[setting] or defs[setting]	return sets[setting]endfunction template:UpdateSetting(option, keys, value)	local opt = self.sets[option]	if not opt then		return	end	if type(keys) == "table" then		for i = 1 , #keys-1 do			opt = opt[key[i]]		end		local key = keys[#keys]		if value and opt[key] ~= value then			opt[key] = value			self:Layout()		else			return opt[key]		end	else		if value and opt[keys] ~= value then			opt[keys] = value			self:Layout()		else			return opt[keys]		end	endendfunction template:GetMediaPath(mediaType, mediaName)	if Addon.lib then		self.sets[mediaType.."_mediaPath"] = Addon.lib and Addon.lib:Fetch(mediaType, mediaName)	else		return self.sets[mediaType.."_mediaPath"]	end	return (Addon.lib and Addon.lib:Fetch(mediaType, mediaName))endfunction Addon:NewWidget(name, frameType, newTemplate)	local widget = Addon.master:CreateClass(frameType)	widget.title = name	widget.owner = self:GetParent() 	tinsert(pieces, {id = string.lower(name), func = widget})		Addon.Merge(Addon.Copy(template), widget) 	return widgetendfunction Addon:UpdateWidgets()	if self.widgets then		for id, widget in pairs(self.widgets) do			if widget.UpdateLayout then				widget:UpdateLayout()			end			if widget.Layout then				Hook(widget)				widget:Layout()			end			if widget.Update then				widget:Update()			end		end	endend