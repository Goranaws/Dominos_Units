local Addon = _G[...]local modName = ...--Unit Buttonlocal widget = Addon:NewWidget('box', 'Button')local unitButton = Addon:CreateNameGenerator("DominosUnits_SecureUnitButton")function widget:New(parent)	local button = self:Bind(CreateFrame('Button', "DominosFrameSecure_"..parent.id, parent, 'SecureUnitButtonTemplate'))	--button:SetParent(parent.header)	button.owner = parent	parent.box = button	return buttonendfunction widget:OnEnter()	self.unit = self.owner.id	UnitFrame_OnEnter(self)endfunction widget:OnLeave()	UnitFrame_OnLeave(self)endlocal isrunninglocal Events = {}function widget:OnUpdate(event, unit)	if (not self.isrunning) then--and (unit == self.owner.id) then		self.isrunning = true		local widgets = self.owner.widgets		if not widgets then			return		end		local hasMouse		for i , widget in pairs(widgets) do			if widget.OnUpdate then				widget:OnUpdate(event)			elseif widget.Update then				widget:Update(event)			end			if (MouseIsOver(widget) and ((widget.sets and widget.sets.mouseOverTooltip) or (not widget.sets)) and widget:IsShown()) and (not hasMouse) and (not widget.noMouse) then				hasMouse = widget			end		end		if hasMouse and MouseIsOver(hasMouse) then			if self.lastMouse ~= hasMouse then				self:OnEnter()			end			self.lastMouse = hasMouse		else			if self.lastMouse then				self:OnLeave()				self.lastMouse = nil			end		end		self.isrunning = nil	endendfunction widget:Layout()    if InCombatLockdown() then        return    end	local w, h = self.owner.sets.width or 10, self.owner.sets.height or 10	local padW, padH = self.owner:GetPadding()	self.owner:SetSize(w + (padW*1.5), h + (padH*1.5))	self:SetSize(w, h)	self:SetFrameStrata("BACKGROUND")endfunction widget:Load()	self:EnableMouse(true)	self.unit = string.lower(self.owner.id)	self:SetAttribute('unit', self.unit)	RegisterUnitWatch(self)	self:SetScript('OnUpdate', self.OnUpdate)	self:SetPoint('Center', self.owner)end