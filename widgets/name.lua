local Addon = _G[...]local modName = ...local title = "Name"local widget = Addon:NewWidget(title, 'Frame')local hori = {'LEFT', 'CENTER', 'RIGHT'}local vert = {'TOP',  'MIDDLE', 'BOTTOM'}widget.defaults = {	visibility = {		border = {			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			file = "Blizzard",			thickness = 10,		},		background = {			enable = false,			file = "Raid",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},	},	fontcolor = {		a = 1,		b = 0,		g = 1,		r = 1,	},	basic = {		position = {			y = -11,			x = 7,			frameLevel = 3,			anchor = "TopLeft",			frameStrata = 2,		},		text = {			width = 116,			color = {				a = 1,				b = 0,				g = 1,				r = 1,			},			justifyH = 2,			height = 2,			enable = true,			file = "Friz Quadrata TT",			justifyV = 2,			size = 10,		},	},}	function widget:New(parent)	local bar = self:Bind(CreateFrame("Frame",nil, parent.box))		bar.text = bar.text or bar:CreateFontString(nil, 'ARTWORK', 'TextStatusBarText')	bar:SetAllPoints(bar.text)	bar.text:SetText("110")	bar.drop = bar.drop or CreateFrame('StatusBar', nil, bar, "BackdropTemplate")	bar.drop:SetMinMaxValues(0,1)	bar.drop:SetValue(1)	bar.drop:SetAllPoints(bar.text)		local v = bar:GetFrameLevel()-2	if v < 1 then v = 1 end		bar.drop:SetFrameLevel(v)		bar.owner = parent	bar.title = title	bar.handler = parent.id	return barendfunction widget:Layout()	if self.sets.basic.text.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:LayoutText()	self:SetVisibility()	endlocal function LookForSets(frame)	if not frame:GetParent() then		return nil, "Dead End"	elseif frame:GetParent().sets then		return frame:GetParent().sets	else		return LookForSets(frame:GetParent())	endendfunction widget:Reposition()	local position = self.sets.basic.position	local set = LookForSets(self)	local size = self.sets.basic.text			local parent = self:GetParent()			if position.wormhole and set then		self.text:ClearAllPoints()		local width, height = self.text:GetWidth() - set.width, (size.height) * (size.size)		local w = set.width				self.text:SetPoint(position.anchor, parent, position.x, position.y)		parent:SetWidth(set.width + width)	else		self.text:ClearAllPoints()		self.text:SetPoint(position.anchor, parent, position.x, position.y)		local width, height = (size.width), (size.height) * (size.size)		self.text:SetHeight(height)				if set then			local w = set.width			if set.magicWidth then				local d = w - size.width				self.text:SetWidth((abs(size.width)  + d))			else				self.text:SetWidth(width)			end		else			self.text:SetWidth(width)		end	end		local lay = Addon.layers[position.frameStrata]	local subLay = Addon.layers[max(1, position.frameStrata - 1)]		self:SetFrameStrata(lay)	self.drop:SetFrameStrata(subLay)	self:SetFrameLevel(position.frameLevel)		self.drop:SetFrameLevel(max(position.frameLevel - 1))	endfunction widget:LayoutText()			local font = self.sets.basic.text		font.scale = (font.scale or 100)	self:SetScale(font.scale/100)	self.text:SetJustifyH(hori[font.justifyH] or font.justifyH or "CENTER")	self.text:SetJustifyV(vert[font.justifyV] or font.justifyV or "MIDDLE")		self.text:SetFont(self:GetMediaPath("font", font.file), font.size or 12)	self.text:SetTextColor(font.color.r, font.color.g, font.color.b, font.color.a)endfunction widget:SetVisibility()	local visibility = self.sets.visibility	local background = visibility.background	local border = visibility.border	local pad = background.padding		local BG = self:GetMediaPath("statusbar", background.file)	local brd = self:GetMediaPath("border", border.file)		if not background.enable then		BG = ""	end	if not border.enable then		brd = ""	end	self.drop:SetBackdrop({ 		bgFile = BG, 		edgeFile = brd,		tile = false,		edgeSize = border.thickness, 		insets = { left = pad, right = pad, top = pad, bottom = pad }	})	do		local color = background.color		self.drop:SetBackdropBorderColor(color.r, color.g, color.b, color.a)	end	do		local color = background.color		self.drop:SetBackdropColor(color.r, color.g, color.b, color.a)	endendfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate()	local unit = self.owner.id		local name = self.sets.basic.text.withTitle == true and UnitPVPName(unit) or UnitName(unit)	self.text:SetText(name)endwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'wormhole',				kind = 'CheckButton',				key = 'wormhole',				panel = "position",			},			{				name = 'With Title',				kind = 'CheckButton',				key = 'withTitle',				panel = "text",			},			{				name = 'Font',				kind = 'Media',				key = 'file',				mediaType = 'Font',				panel = 'text',			},			{				name = 'Size',				kind = 'Slider',				key = 'size',				min = 1,				max = 25,				panel = 'text',			},			{				name = 'Justify Vertical',				kind = 'Slider',				key = 'justifyV',				panel = 'text',				min = 1,				max = 3,			},			{				name = 'Justify Horizontal',				kind = 'Slider',				key = 'justifyH',				panel = 'text',				min = 1,				max = 3,			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'text',			},			{				name = 'Height',				kind = 'Slider',				key = 'height',				panel = 'text',				min = 1,				max = 6,			},						{				name = 'Width',				kind = 'Slider',				key = 'width',				panel = 'text',				min = 1,				max  = 500			},						{				name = 'Scale',				kind = 'Slider',				key = 'scale',				panel = 'text',				min = 25,				max  = 150			},						{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},		{			name = "Frame Level",			kind = "Slider",			key = "frameLevel",			panel = 'position',			min = 1,			max = 100,		},		{			name = "Frame Strata",			kind = "Slider",			key = "frameStrata",			panel = 'position',			min = 1,			max = 8,		},			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "text",			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},	}