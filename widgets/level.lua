local Addon = _G[...]local modName = ...local title = "Level"local widget = Addon:NewWidget(title, 'Frame')widget.defaults =  {	visibility = {		border = {			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			file = "Blizzard",			thickness = 10,		},		background = {			enable = false,			file = "Raid",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},	},	fontcolor = {		a = 1,		r = 1,		g = 1,		b = 0,	},	basic = {		position = {			y = 9,			x = -9,			frameLevel = 4,			anchor = "BottomRight",			frameStrata = 2,		},		text = {			enable = true,			file = "Friz Quadrata TT",			color = {				a = 1,				b = 0,				g = 1,				r = 1,			},			size = 9,		},	},}	function widget:New(parent)		local bar = self:Bind(CreateFrame("Frame",nil, parent.box))		bar.text = bar.text or bar:CreateFontString(nil, 'ARTWORK', 'TextStatusBarText')	bar:SetAllPoints(bar.text)	bar.text:SetText("110")	bar.drop = bar.drop or CreateFrame('StatusBar', nil, bar)	bar.drop:SetMinMaxValues(0,1)	bar.drop:SetValue(1)	bar.drop:SetAllPoints(bar.text)		local v = bar:GetFrameLevel()-2	if v < 1 then v = 1 end		bar.drop:SetFrameLevel(v)		bar.owner = parent	bar.title = title	bar.handler = parent.id	return barendfunction widget:Layout()	if self.sets.basic.text.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:LayoutText()	self:SetVisibility()endfunction widget:Reposition()	local position = self.sets.basic.position		self:SetAllPoints(self.text)		self.text:ClearAllPoints()	self.text:SetPoint(position.anchor, self:GetParent(), position.x, position.y)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(position.frameLevel)	endfunction widget:LayoutText()	local text = self.text			local font = self.sets.basic.text	self.text:SetFont(self:GetMediaPath("font", font.file), font.size or 12)	self.text:SetTextColor(font.color.r, font.color.g, font.color.b, font.color.a)endfunction widget:SetVisibility()	local visibility = self.sets.visibility	local background = visibility.background	local border = visibility.border	local pad = background.padding		local BG = self:GetMediaPath("statusbar", background.file)	local brd = self:GetMediaPath("border", border.file)		if not background.enable then		BG = ""	end	if not border.enable then		brd = ""	end	self.drop:SetBackdrop({ 		bgFile = BG, 		edgeFile = brd,		tile = false,		edgeSize = border.thickness, 		insets = { left = pad, right = pad, top = pad, bottom = pad }	})	do		local color = background.color		self.drop:SetBackdropBorderColor(color.r, color.g, color.b, color.a)	end	do		local color = background.color		self.drop:SetBackdropColor(color.r, color.g, color.b, color.a)	endendfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate()	local unit = self.owner.id		local level = UnitEffectiveLevel(unit)	if level < 0 then		level = "??"	end		self.text:SetText(level)endwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Font',				kind = 'Media',				key = 'file',				mediaType = 'Font',				panel = 'text',			},			{				name = 'Size',				kind = 'Slider',				key = 'size',				min = 1,				max = 25,				panel = 'text',			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'text',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},		{			name = "Frame Level",			kind = "Slider",			key = "frameLevel",			panel = 'position',			min = 1,			max = 100,		},		{			name = "Frame Strata",			kind = "Slider",			key = "frameStrata",			panel = 'position',			min = 1,			max = 7,		},			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "text",			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},	}