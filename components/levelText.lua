local bar = _G[...]local modName = ...--Level Textlocal component = bar:NewComponent('level', 'Frame')function component:New(parent)	local name = ('%s_%s_LevelText'):format(modName, parent.id)	if _G[name] then		return _G[name]	end	local control = self:Bind(CreateFrame('Frame', name, parent.box))	control.owner = parent	control:SetFrameLevel(40)	local string = control:CreateFontString(nil, 'ARTWORK', 'GameFontNormalSmall')	string:SetAllPoints(control)	control.text = string	return controlendcomponent.defaults = {	scale = 100,	justifyV = 1,	width = 25,	y = -17,	x = 0,	justifyH = 3,	height = 12,	enable = true,	anchor = 'TopRight',}local _hori = {	'LEFT',	'CENTER',	'RIGHT',}local _vert = {	'TOP',	'MIDDLE',	'BOTTOM',}function component:Layout()	local sets = self.sets	if sets.enable ~= true then		self:Hide()		self.text:SetText('')		return	else		self:Show()	end	self:SetSize(sets.width, sets.height)	self.text:SetJustifyH(_hori[sets.justifyH]) -- Sets horizontal text justification ('LEFT','RIGHT', or 'CENTER')	self.text:SetJustifyV(_vert[sets.justifyV]) -- Sets vertical text justification ('TOP','BOTTOM', or 'MIDDLE')	self:SetScale(self.sets.scale/100)	self:ClearAllPoints()	local x = self.sets.x/(self.sets.scale/100)	local y = self.sets.y/(self.sets.scale/100)	self:SetPoint(self.sets.anchor, self:GetParent(), x, y)endfunction component:Update()	if self.sets.enable ~= true then		return	end	local unit = self.owner.id	self.text:SetText(UnitLevel(unit))endlocal anchors = {	'TopLeft',	'Top',	'TopRight',	'Right',	'BottomRight',	'Bottom',	'BottomLeft',	'Left',	'Center',}local layers = {	'BACKGROUND',	'LOW',	'MEDIUM',	'HIGH',	'DIALOG',	'FULLSCREEN',	'FULLSCREEN_DIALOG',	'TOOLTIP',}local options = {	{		name = 'Enable',		kind = 'CheckButton',		key = 'enable',	},	{		name = 'Anchor',		kind = 'Menu',		key = 'anchor',		table = anchors,	},	{		name = 'Justify Vert',		kind = 'Slider',		key = 'justifyV',		min = 1,		max = 3,	},	{		name = 'Justify Hori',		kind = 'Slider',		key = 'justifyH',		min = 1,		max = 3,	},	{		name = 'X Offset',		kind = 'Slider',		key = 'x',		min = -400,		max = 400,	},	{		name = 'Y Offset',		kind = 'Slider',		key = 'y',		min = -400,		max = 400,	},	{		name = 'Width',		kind = 'Slider',		key = 'width',		min = 10,		max = 400,		step = 1,	},	{		name = 'Height',		kind = 'Slider',		key = 'height',		min = 12,		max = 240,		step = 14,	},	{		name = 'Scale',		kind = 'Slider',		key = 'scale',		min = 25,		max = 250,	},}function component:CreateMenu(menu)	return bar.Menu.NewPanel(menu, 'Level', options)end