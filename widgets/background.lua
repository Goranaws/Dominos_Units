local Addon = _G[...]local modName = ...local title = "Background"local widget = Addon:NewWidget(title, "Frame")widget.defaults = {	visibility = {		border = {			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			file = "Blizzard",			thickness = 10,			padL = 0,			padR = 0,			padT = 0,			padB = 0,		},		background = {			enable = true,			file = "Armory",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			padL = 0,			padR = 0,			padT = 0,			padB = 0,		},	},	basic = {		position = {			y = -14,			x = 4,			frameLevel = 3,			anchor = "TopLeft",			frameStrata = 2,		},		size = {			height = 15,			enable = true,			width = 116,		},	},}function widget:New(parent)	local bar = self:Bind(CreateFrame('Frame', nil, parent.box, "BackdropTemplate"))	bar.owner = parent	bar:SetFrameLevel(1)	bar.drop = bar.drop or CreateFrame('Frame', nil, bar, "BackdropTemplate")	bar.drop:SetAllPoints(bar)	bar.border = bar.border or CreateFrame('Frame', nil, bar, "BackdropTemplate")	bar.border:SetAllPoints(bar)		local v = bar:GetFrameLevel()-2	if v < 1 then v = 1 end		bar.drop:SetFrameLevel(v)		bar.owner = parent	bar.title = title	bar.handler = parent.id	return barendfunction widget:Free()	endfunction widget:Layout()	if self.sets.basic.size.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:Resize()	self:SetVisibility()endfunction widget:Reposition()	local position = self.sets.basic.position	local size = self.sets.basic.size		self:ClearAllPoints()	self:SetPoint(position.anchor, self:GetParent(), position.x, position.y)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(position.frameLevel)		endlocal function LookForSets(frame)	if not frame:GetParent() then		return nil, "Dead End"	elseif frame:GetParent().sets then		return frame:GetParent().sets	else		return LookForSets(frame:GetParent())	endendfunction widget:Resize()	local size = self.sets.basic.size		local width, height = (size.width), (size.height)	self:SetHeight(height)			local set = LookForSets(self)	if set then		local w = set.width		if set.magicWidth then			local d = w - 191			self:SetWidth((size.width  + d))		else			self:SetWidth(width)		end	else		self:SetWidth(width)	endendfunction widget:SetVisibility()	self:UpdateBackground()	self:UpdateBorder()endfunction widget:UpdateBackground()	local sets = self.sets.visibility.background	local widget = self.drop	local file = self:GetMediaPath("statusbar", sets.file)	if not sets.enable then		file = ""	end		widget:SetBackdrop({ 		bgFile = file,	})	widget:SetBackdropColor(sets.color.r, sets.color.g, sets.color.b, sets.color.a)			widget:ClearAllPoints()		sets.padL = sets.padL or 0	sets.padR = sets.padR or 0	sets.padT = sets.padT or 0	sets.padB = sets.padB or 0				widget:SetPoint("Left", -sets.padL, 0)	widget:SetPoint("Right", sets.padR, 0)	widget:SetPoint("Top", 0, sets.padT)	widget:SetPoint("Bottom", 0, -sets.padB)	endfunction widget:UpdateBorder()	local sets = self.sets.visibility.border	local widget = self.border	local file = self:GetMediaPath("border", sets.file)	if not sets.enable then		file = ""	end		widget:SetBackdrop({ 		edgeFile = file,		edgeSize = sets.thickness, 	})	widget:SetBackdropBorderColor(sets.color.r, sets.color.g, sets.color.b, sets.color.a)			widget:ClearAllPoints()		sets.padL = sets.padL or 0	sets.padR = sets.padR or 0	sets.padT = sets.padT or 0	sets.padB = sets.padB or 0	widget:SetPoint("Left", -sets.padL, 0)	widget:SetPoint("Right", sets.padR, 0)	widget:SetPoint("Top", 0, sets.padT)	widget:SetPoint("Bottom", 0, -sets.padB)	endfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate()	local unit = self.owner.id		local unit = self.owner.id		local color = self.sets.visibility.background.color	local r, b, g, a = 0, 1, 0, 1	local unit = self.owner.id	local classification = UnitClassification(unit);		if self.sets.visibility.background.targetReaction == true then		if ( classification == "minus" ) then			r, b, g, a= 0, 0, 0, 0		elseif UnitIsUnit("player", unit) then			r, b, g, a = color.r, color.g, color.b, color.a		elseif( not UnitIsFriend(unit, "player") and UnitPlayerControlled(unit) ) then			if( UnitCanAttack("player", unit) ) then				r, b, g = .9, 0, 0			else				r, b, g = .6, .2, .2			end		elseif( UnitReaction(unit, "player") ) then			local reaction = UnitReaction(unit, "player")			if ( not UnitPlayerControlled(unit) and UnitIsTapDenied(unit) ) then				g, g, b, a = .5, .5, .5, .5			elseif( reaction > 4 ) then				r, b, g = 0, 1, 0			elseif( reaction == 4 ) then				r, b, g = .93, .93, 0			elseif( reaction < 4 ) then				r, b, g = .9, 0, 0			end		end		self.drop:SetBackdropColor(r, b, g, a)	endendwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "size",			},			{				name = 'Height',				kind = 'Slider',				key = 'height',				min = 10,				max = 250,				panel = 'size',			},			{				name = 'Width',				kind = 'Slider',				key = 'width',				min = 10,				max = 250,				panel = 'size',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},			{				name = "Frame Level",				kind = "Slider",				key = "frameLevel",				panel = 'position',				min = 1,				max = 100,			},			{				name = "Frame Strata",				kind = "Slider",				key = "frameStrata",				panel = 'position',				min = 1,				max = 8,			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Left',				kind = 'Slider',				key = 'padL',				panel = "background",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Right',				kind = 'Slider',				key = 'padR',				panel = "background",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Top',				kind = 'Slider',				key = 'padT',				panel = "background",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Bottom',				kind = 'Slider',				key = 'padB',				panel = "background",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},			{				name = 'Left',				kind = 'Slider',				key = 'padL',				panel = "border",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Right',				kind = 'Slider',				key = 'padR',				panel = "border",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Top',				kind = 'Slider',				key = 'padT',				panel = "border",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},			{				name = 'Bottom',				kind = 'Slider',				key = 'padB',				panel = "border",				min = -16,				max = 32,				runOnce = function(self)					--self:SetDynamic(3)				end			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},	}