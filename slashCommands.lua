local unitBar = Dominos[...]local frames = unitBar.frameslocal function check(source, target)	--you may now add new defaults at will. ~Goranaws	if not target then 		target = {}	end	for key, value in pairs(source) do		if type(value) == "table" then			target[key] =check(value, target[key])		else			if (type(value) == "boolean") then				if target[key] == nil then					target[key] = value				end 			else 				target[key] = target[key] or value 			end		end	end	return targetend--viable unit checklocal base = {	"player",	"target",	"pet",	"playerpet",	"focus",	"arena%d+",	"boss%d+",	"party%d+",	"partypet%d+",	"raid%d+",	"raidpet%d+",	"mouseover",}local max = {	raid = 40,	raidpet = 40,	arena = 4,	boss = 4,	party = 4,	partypet = 4,}local function IsViable(unit)	local keep = unit	unit = string.lower(unit)	local count = 0	if string.match (unit, "target" , 2) then		_, count = string.gsub(string.sub (unit, 2, string.len(unit)), "target", "")		if (unit == "player") and count > 0 then			return nil		else			unit = string.gsub (unit, "target", "", count)		end	end		local can	for i, test in pairs(base) do		if string.match(unit, test) then			return string.lower(keep)			end	endendlocal defaults  = {	frames = {		player = true,		target = true,		targettarget = true,		focus = true,		focustarget = true,		playerpet = true,	},	disable = {		PlayerFrame = true,		TargetFrame = true,		FocusFrame = true,	}}local function getSets()	Dominos.db.profile.units = Dominos.db.profile.units or defaults	return Dominos.db.profile.unitsendlocal function add(unit)	if not IsViable(unit) then		print("invalid unit! :(", unit)		return	end	getSets().frames[unit] = true	if frames[unit] then		if frames[unit].frameOverlay then			frames[unit].frameOverlay:Show()		end		frames[unit]:Restore()		frames[unit]:Show()		frames[unit]:EnableMouse(true)	end	frames[unit] = frames[unit] or unitBar:New(unit)	frames[unit]:Reload()	if LibStub and LibStub('LibKeyBound-1.0') then		LibStub('LibKeyBound-1.0'):Deactivate()	end	Dominos:GetModule('ConfigOverlay'):Show()endlocal function remove(unit)	getSets().frames[unit] = nil	if frames[unit] then		frames[unit]:Delete()		frames[unit].frameOverlay:Hide()	end	if LibStub and LibStub('LibKeyBound-1.0') then		LibStub('LibKeyBound-1.0'):Deactivate()	end	Dominos:GetModule('ConfigOverlay'):Show()endlocal function disable(frameName)	if _G[frameName] and (getSets().disable[frameName]) then		getSets().disable[frameName] = true		_G[frameName].par_ent = _G[frameName]:GetParent()		_G[frameName]:SetParent(MainMenuBarArtFrame)	else		print(frameName, ": Not Valid.")	endendlocal function enable(frameName)	if _G[frameName] then		getSets().disable[frameName] = nil		_G[frameName]:SetParent(_G[frameName].par_ent)	else		print(frameName, ": Not Valid.")	endendSLASH_DOMUNITS1 = '/dunit'local args = {}local splittinglocal function getArgs(msg) --Breaks the msg up into a table.	wipe(args)	splitting = nil	while string.find(msg, ' ') do		splitting = string.split(' ', msg) or msg		msg = string.gsub(msg, splitting..' ', "")		tinsert(args, splitting)	end	if msg and not string.find(msg, ' ') then		tinsert(args, msg)	end	return args or msgendlocal function handler(msg)	local args = getArgs(msg)	local arg1  = unpack(args)		arg1 = string.lower(arg1)	if (arg1 == "add") then		add( string.lower(args[2]))	elseif  (arg1 == "remove") then		remove( string.lower(args[2]))	elseif  (arg1 == "show") then		enable(args[2])	elseif  (arg1 == "hide") then		disable(args[2])	endendSlashCmdList['DOMUNITS'] = handler