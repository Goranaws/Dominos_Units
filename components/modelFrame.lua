local AddonName = "Dominos"local Addon = LibStub('AceAddon-3.0'):GetAddon(AddonName)local ModelFrame = Addon:CreateClass('PlayerModel')Addon.ModelFrame = ModelFramefunction ModelFrame:New(parent)	local name = ('%s_%s_ModelFrame'):format(AddonName, parent.id)	if _G[name] then		return _G[name]	end	local model = self:Bind(CreateFrame('PlayerModel', ('%s_%s_ModelFrame'):format(AddonName, parent.id), parent.box, "ModelWithZoomTemplate"))	model.owner = parent	model:SetFrameLevel(1)	model:RegisterEvent("UNIT_MODEL_CHANGED")	return modelendModelFrame.defaults = {	zoom = 0.7,	frameLevel = 1,	frameLayer = 1,	scale = 1,	justifyV = "CENTER",	width = 133,	y = -45,	x = -110,	justifyH = "CENTER",	rotation = 0.449085388183594,	anchor = "BottomLeft",	height = 197,	enable = false,	clickThru = true,	rotation = 0,	zoom = 0,}function ModelFrame:Load()	self:RegisterForDrag(false)	self:EnableMouse(false)	self:SetScript("OnEvent", self.OnEvent)	self:SetScript("OnShow", self.OnShow)	self:SetScript("OnMouseWheel", self.OnMouseWheel)	self:SetScript("OnMouseUp", self.OnMouseUp)endlocal layers = {	'BACKGROUND',	'LOW',	'MEDIUM',	'HIGH',	'DIALOG',	'FULLSCREEN',	'FULLSCREEN_DIALOG',	'TOOLTIP',}function ModelFrame:Layout()	local sets = self.sets	if sets.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:ClearAllPoints()	self:SetPoint(sets.anchor, self:GetParent(), sets.x, sets.y)	local w, h = self:GetParent():GetSize()	local width, height = w*(sets.width/100), h*(sets.height/100)	self:SetSize(width, height)	self:SetScale(sets.scale/100)	self:EnableMouse(false)	--self:EnableMouseWheel(false)	local rot = (self.sets.rotation/360)*6.28318306053847	local zoo = self.sets.zoom/100	self.zoomlevel = zoo	self.rotation = rot	self:SetRotation(rot or MODELFRAME_DEFAULT_ROTATION)	self:SetPortraitZoom(zoo or MODELFRAME_MIN_ZOOM)	local lay = layers[sets.frameLayer]	self:SetFrameStrata(lay)	self:SetFrameLevel(sets.frameLevel)endfunction ModelFrame:Update()	if self.noUpdate then		return	end	local unit = self.owner.id	local dead = UnitIsGhost(unit) or UnitIsDead(unit)	local sets = self.sets	if (max == 0 or dead) and (self:GetAlpha() ~= .5) then		self:SetAlpha(.5)	elseif self:GetAlpha() ~= 1 then		self:SetAlpha(1)	end	self.lastUnit = self.lastUnit or UnitGUID(unit)	if self.lastUnit ~= UnitGUID(unit) then		self.lastUnit = UnitGUID(unit)		self:GetScript("OnEvent")(self)	endendfunction ModelFrame:OnEvent(...)	if self.owner.id and UnitName(self.owner.id) then		self:SetUnit(self.owner.id)	endendfunction ModelFrame:OnShow()	self:GetScript("OnEvent")(self)	self:SetRotation(self.rotation or MODELFRAME_DEFAULT_ROTATION)	self:SetPortraitZoom(self.zoomlevel or MODELFRAME_MIN_ZOOM)endfunction ModelFrame:OnMouseWheel(...)	Model_OnMouseWheel(self, ...)	if self.zoomLevel ~= self.sets.zoom then		self.sets.zoom = self.zoomLevel	endendfunction ModelFrame:OnMouseUp(...)	Model_OnMouseUp(self, ...)	if self.rotation ~= self.sets.rotation then		self.sets.rotation = self.rotation	endendlocal anchors = {	"TopLeft",	"Top",	"TopRight",	"Right",	"BottomRight",	"Bottom",	"BottomLeft",	"Left",	"Center",}local layers = {	'BACKGROUND',	'LOW',	'MEDIUM',	'HIGH',	'DIALOG',	'FULLSCREEN',	'FULLSCREEN_DIALOG',	'TOOLTIP',}local options = {	{		name = "Frame Level",		kind = "Slider",		key = "frameLevel",		min = 1,		max = 100,	},		{		name = "Frame Layer",		kind = "Slider",		key = "frameLayer",		min = 1,		max = 8,	},	{		name = "Rotation",		kind = "Slider",		key = "rotation",		min = 0,		max = 360,	},		{		name = "Zoom",		kind = "Slider",		key = "zoom",		min = -50,		max = 300,	},	{		name = "Anchor",		kind = "Menu",		key = "anchor",		table = anchors,	},	{		name = "Enable",		kind = "CheckButton",		key = "enable",	},	{		name = "Death Effect",		kind = "CheckButton",		key = "deathEffect",	},	{		name = "Click Thru",		kind = "CheckButton",		key = "clickThru",	},	{		name = "X Offset",		kind = "Slider",		key = "x",		min = -400,		max = 400,	},	{		name = "Y Offset",		kind = "Slider",		key = "y",		min = -400,		max = 400,	},	{		name = "Width",		kind = "Slider",		key = "width",		min = 10,		max = 400,	},	{		name = "Height",		kind = "Slider",		key = "height",		min = 10,		max = 400,	},	{		name = "Scale",		kind = "Slider",		key = "scale",		min = 25,		max = 250,	},}local opts = Dominos.Optionsfunction ModelFrame:GetPanel(menu)	if not opts.create then		return	end	local panel = opts.create.Panel(menu, "Model", options)		return panelendlocal unitBar = Dominos[...]unitBar:AddPart("model", function(parent)	return ModelFrame:New(parent)end)