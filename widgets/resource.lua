local player_class = select(2, UnitClass("player"))local player_spec = GetSpecialization()local max_points = 9local Resourcelocal function applyTexture(self, Resource, icon, state) --1 = bg Only, 2 = Show All, 3 = Hide All		local h, w = icon:GetSize()		Resource.getBase(icon, w, h)		Resource.getHighlight(icon, w, h)		Resource.getShine(icon, w, h)		if state == 3 then			if icon:IsShown() then				icon:Hide()				icon.highlight.shown = nil			end		else			icon:Show()			icon.base:Show()			icon.shine:Show()			icon.base:SetAlpha(1)			icon.hideAll = nil						if state == 2 then				icon.highlight:SetAlpha(1)				if not icon.highlight.shown then					if icon.Border_animation then						icon.Border_animation:Play()						icon.Shine_animation:Play()					else					local fadeInfo = {};						fadeInfo.mode = "IN";						fadeInfo.timeToFade = COMBOFRAME_HIGHLIGHT_FADE_IN;						fadeInfo.finishedFunc = ComboPointShineFadeIn;						fadeInfo.finishedArg1 = icon.shine;						UIFrameFade(icon.highlight, fadeInfo)					end					icon.highlight.shown = true				end			else				if icon.highlight.shown then					local fadeInfo = {};					fadeInfo.mode = "OUT";					fadeInfo.timeToFade = COMBOFRAME_HIGHLIGHT_FADE_IN;					fadeInfo.finishedFunc = ComboPointShineFadeIn;					--21fadeInfo.finishedArg1 = icon.shine;					UIFrameFade(icon.highlight, fadeInfo)					icon.highlight:SetAlpha(0)					icon.highlight.shown = nil				end			end		end	endlocal sources = {}--[[--]]local comboTexture = [[Interface\addons\Dominos_Units\textures\combos\]]do --rouge, druid, sometimes vehicle	local Resource = {}	max_points = 9	Resource.getBase = function(icon, w, h)		local texture, coords = comboTexture..'border'		if not icon.base.set then			icon.base:SetTexture(texture)			icon.base:SetPoint("Center", 0, 0)			icon.base.set = true		end				if (icon.w ~= w) or (icon.h ~= h) then			icon.base:SetSize((12/12) * h, (12/12) * w)			icon.w = w			icon.h = h		end	end	Resource.getHighlight = function(icon, w, h)		local texture =  comboTexture..'dot'		if not icon.highlight.set then			icon.highlight:SetTexture(texture)			icon.highlight:SetAlpha(0)			icon.highlight.set = true		end				if (icon.lightW ~= w) or (icon.lightH ~= h) then			icon.highlight:SetSize((12/12) * h, (12/12) * w)			icon.highlight:SetPoint("Center", 0, 0)			icon.lightW = w			icon.lightH = h		end			end	Resource.getShine = function(icon, w, h)		local texture = comboTexture..'flash'		if not icon.shine.set then			icon.shine:SetTexture(texture)			icon.shine:SetBlendMode("ADD")			icon.shine:SetAlpha(0)			icon.shine.set = true		end		if (icon.shineW ~= w) or (icon.h ~= shineH) then			icon.shine:SetSize( h *2,  w * 2)			icon.shine:SetPoint("Center", 0, 0)			icon.shineW = w			icon.shineH = h		end	end	Resource.applyTexture = applyTexture	Resource.update = function(self)		local icons = self.icons		local is_rogue = player_class == "ROGUE"		local is_druid = player_class == "DRUID"		local hasVehicle = UnitHasVehicleUI(self.owner.id)		local power = hasVehicle and GetComboPoints("vehicle", self.owner.id) or UnitPower(self.owner.id, SPELL_POWER_COMBO_POINTS)		local maxPower = UnitPowerMax(self.owner.id, SPELL_POWER_COMBO_POINTS)		if maxPower == 0 then maxPower = 5 end				if (self.owner.id == "pet" and not hasVehicle)		or (self.owner.id ~= "player") 		or (not(is_rogue and is_druid))		or (is_druid and GetShapeshiftFormID() ~= CAT_FORM) then			for i = 1, #self.icons do				local icon = self.icons[i]				Resource.applyTexture(self, Resource, icon, 3) -- Hide				icon:Hide()			end			return		end		for i = 1, #self.icons do			local icon = self.icons[i]			icon.index = i			if i <= maxPower then				if i > (power) then					Resource.applyTexture(self, Resource, icon, 1) --bg only				else					Resource.applyTexture(self, Resource, icon, 2) --show all				end			else				Resource.applyTexture(self, Resource, icon, 3) -- Hide			end		end	end	sources.ComboPoints = Resourceenddo --mage	local Resource = {}	max_points = 4	Resource.getBase = function(icon, w, h)		local texture =  [[Mage-ArcaneCharge]]		if not icon.base.set then			icon.base:SetAtlas(texture)			icon.base:SetAllPoints(icon)			icon.base:SetBlendMode("ALPHAKEY")						icon.base:SetAlpha(.4)			icon.base.set = true		end	end	Resource.getHighlight = function(icon, w, h)		local texture =  [[Mage-ArcaneCharge]]		if not icon.highlight.set then			icon.highlight:SetAtlas(texture)			icon.highlight:SetBlendMode("ADD")			icon.highlight:SetAllPoints(icon)						icon.highlight:SetAlpha(0)			icon.highlight.set = true		end	end	Resource.getShine = function(icon, w, h)		local texture =  [[Mage-ArcaneCharge-CircleGlow]]		if not icon.shine.set then			icon.shine:SetAtlas(texture)			icon.shine:SetBlendMode("ADD")			icon.shine:SetAllPoints(icon)			icon.shine:SetAlpha(0)			icon.shine.set = true		end	end	Resource.applyTexture = applyTexture	Resource.update = function(self)		local icons = self.icons		local power = UnitPower(self.owner.id, SPELL_POWER_ARCANE_CHARGES);			local maxPower = UnitPowerMax(self.owner.id, SPELL_POWER_ARCANE_CHARGES )				local icons = self.icons		for i, b in pairs(icons) do			b.index = i			if i <= maxPower then				if i > power then					Resource.applyTexture(self, Resource, b, 1) --bg only				else					Resource.applyTexture(self, Resource, b, 2) --show all				end			else				Resource.applyTexture(self, Resource, b, 3) -- Hide			end		end	end	sources.ArcaneCharges = Resourceenddo --monk	local Resource = {}	max_points = 5	Resource.getBase = function(icon, w, h)		local texture, coords = [[Interface\ComboFrame\ComboPoint]], {0, 0.375, 0, 1}		if not icon.base.set then			icon.base:SetTexture(texture)			icon.base:SetTexCoord(unpack(coords))			icon.base:SetPoint("TopLeft", 0, 0)			icon.base.set = true		end		if (icon.w ~= w) or (icon.h ~= h) then			icon.base:SetSize((12/12) * h, (16/12) * w)			icon.w = w			icon.h = h		end	end	Resource.getHighlight = function(icon, w, h)		local texture =  [[MonkUI-LightOrb]]		if not icon.highlight.set then			icon.highlight:SetAtlas(texture)			icon.highlight:SetAlpha(0)			icon.highlight:SetAllPoints(icon)			icon.highlight.set = true		end	end	Resource.getShine = function(icon, w, h)		local texture, coords = [[Interface\ComboFrame\ComboPoint]], {0.5625, 1, 0, 1}		if not icon.shine.set then			icon.shine:SetTexture(texture)			icon.shine:SetTexCoord(unpack(coords))			icon.shine:SetVertexColor(1,1,1,0)			icon.shine:SetBlendMode("ADD")			icon.shine:SetAlpha(0)			icon.shine.set = true		end		if (icon.shineW ~= w) or (icon.h ~= shineH) then			icon.shine:SetSize((14/12) * h, (16/12) * w)			icon.shine:SetPoint("TopLeft", 0, (4/12) * h)			icon.shineW = w			icon.shineH = h		end	end	Resource.applyTexture = applyTexture	Resource.update = function(self)		local icons = self.icons		local power = UnitPower(self.owner.id, SPELL_POWER_CHI);			local maxPower = UnitPowerMax(self.owner.id, SPELL_POWER_CHI )				local icons = self.icons		for i, b in pairs(icons) do			b.index = i			if i <= maxPower then				if i > power then					Resource.applyTexture(self, Resource, b, 1) --bg only				else					Resource.applyTexture(self, Resource, b, 2) --show all				end			else				Resource.applyTexture(self, Resource, b, 3) -- Hide			end		end	end	sources.Chi = Resourceenddo --warlock	local Resource = {}	max_points = 5	Resource.getBase = function(icon, w, h, scale)		local texture, coords = [[Interface\PlayerFrame\UI-WarlockShard]], {.01562500, 0.82812500, 0.60937500, .83593750}		if not icon.base.set then			icon.base:SetTexture(texture)			icon.base:SetTexCoord(unpack(coords))			icon.base.set = true		end		if (icon.w ~= w) or (icon.h ~= h) or (icon.baseScale ~= scale) then			icon.base:SetSize(52, 29)			icon.base:SetPoint("TopLeft", -5, 3)			icon.w = w			icon.h = h			icon.baseScale = scale		end	end	Resource.getHighlight = function(icon, w, h, scale)		local texture, coords = [[Interface\PlayerFrame\UI-WarlockShard]], {0.01562500, .28125000, 0.00781250, 0.13281250}		if not icon.highlight.set then			icon.highlight:SetTexture(texture)			icon.highlight:SetTexCoord(unpack(coords))			icon.highlight:SetAlpha(0)			icon.highlight.set = true		end		if (icon.highlightW ~= w) or (icon.highlightH ~= h) or (icon.highlightScale ~= scale) then			icon.highlight:SetSize(17, 16)			icon.highlight:SetPoint("TopLeft", 3, -2)			icon.highlightW = w			icon.highlightH = h			icon.highlightScale = scale		end			end	Resource.getShine = function(icon, w, h, scale)			local texture, coords = [[Interface\PlayerFrame\UI-WarlockShard]], {0.01562500, .42187500, 0.14843750, 0.32812500}		if not icon.shine.set then			icon.shine:SetTexture(texture)			icon.shine:SetTexCoord(unpack(coords))			icon.shine:SetAlpha(0)			icon.shine:SetBlendMode("ADD")			icon.shine.set = true		end		if (icon.shineW ~= w) or (icon.shineH ~= h) or (icon.shineScale ~= scale) then			icon.shine:SetSize((26), (23))			icon.shine:SetPoint("TopLeft", -2, 1)			icon.shineW = w			icon.shineH = h			icon.shineScale = scale		end	end	Resource.applyTexture = applyTexture	Resource.update = function(self)		local icons = self.icons		local power = UnitPower(self.owner.id, SPELL_POWER_SOUL_SHARDS);			local maxPower = UnitPowerMax(self.owner.id, SPELL_POWER_SOUL_SHARDS )				local icons = self.icons		for i, b in pairs(icons) do			b.index = i			if i <= maxPower then				if i > power then					Resource.applyTexture(self, Resource, b, 1) --bg only				else					Resource.applyTexture(self, Resource, b, 2) --show all				end			else				Resource.applyTexture(self, Resource, b, 3) -- Hide			end		end	end	sources.Shards = Resourceenddo --death Knight	local Resource = {}	max_points = 7	 	Resource.getBase = function(icon, w, h)		local texture, coords = [[Interface\PlayerFrame\UI-PlayerFrame-Deathknight-Ring]], {0,1,0,1}		if not icon.base.set then			icon.base:SetTexture(texture)			icon.base:SetTexCoord(unpack(coords))			icon.base:SetVertexColor(.6, .6, .6, 1)			icon.base.set = true		end		if (icon.w ~= w) or (icon.h ~= h) then			icon.base:SetSize(24, 24)						icon.base:SetPoint("TopLeft", 0, 1)			icon.w = w			icon.h = h		end	end	Resource.getHighlight = function(icon, w, h)		local texture, coords =  [[Interface\PlayerFrame\UI-PlayerFrame-Deathknight-SingleRune]], {0,1,0,1}		if not icon.highlight.set then			icon.highlight:SetTexture(texture)			icon.highlight:SetTexCoord(unpack(coords))			icon.highlight:SetAlpha(0)			icon.highlight.set = true		end				if (icon.lightW ~= w) or (icon.lightH ~= h) then			icon.highlight:SetSize(24, 24)						icon.highlight:SetPoint("TopLeft", 0, 1)			icon.lightW = w			icon.lightH = h		end			end	Resource.getShine = function(icon, w, h)		local texture, coords = [[Interface\ComboFrame\ComboPoint]], {0.5625, 1, 0, 1}		if not icon.shine.set then			icon.shine:SetTexture(texture)			icon.shine:SetTexCoord(unpack(coords))			icon.shine:SetVertexColor(1,1,1,0)			icon.shine:SetBlendMode("ADD")			icon.shine:SetAlpha(0)			icon.shine.set = true		end		if (icon.shineW ~= w) or (icon.h ~= shineH) then			icon.shine:SetSize((14/12) * h, (16/12) * w)			icon.shine:SetPoint("TopLeft", 0, (4/12) * h)			icon.shineW = w			icon.shineH = h		end	end	Resource.applyTexture = applyTexture	Resource.update = function(self)		local icons = self.icons		local maxPower = UnitPowerMax(self.owner.id, SPELL_POWER_RUNES)		local icons = self.icons		for i, icon in pairs(icons) do			local start, duration, runeReady = GetRuneCooldown(i)			icon.index = i			if i <= maxPower then				if runeReady then					Resource.applyTexture(self, Resource, icon, 2) --show all					icon.cooldown:Hide()				else					Resource.applyTexture(self, Resource, icon, 2) --show all					if start then						CooldownFrame_Set(icon.cooldown, start, duration, true, true)					end				end			else				Resource.applyTexture(self, Resource, icon, 3) -- Hide			end		end	end	sources.Runes = Resourceenddo --Paladin	local Resource = {}	max_points = 5		Resource.getBase = function(icon, w, h)		local texture, coords		local index = icon.index		local w, h		if index ==1 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.00390625, 0.14453125, 0.78906250, 0.96093750}			w, h = 36, 22		elseif index == 2 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.15234375, 0.27343750, 0.78906250, 0.92187500}			w, h = 31, 17		elseif index == 3 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.28125000, 0.38671875, 0.64843750, 0.81250000}			w, h = 27, 21		elseif index == 4 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.28125000, 0.38671875, 0.82812500, 0.92187500}			w, h = 27, 12		elseif index == 5 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.39453125, 0.49609375, 0.64843750, 0.74218750}			w, h = 26, 12		end						if not icon.base.set then			icon.base:SetTexture(texture)			icon.base:SetTexCoord(unpack(coords))			icon.base:SetVertexColor(0,0,0)			icon.base.set = true		end				if (icon.baseW ~= w) or (icon.baseH ~= h) then			icon.base:SetSize(h, w)						icon.base:SetAllPoints(icon)			icon.baseW = w			icon.baseH = h		end			end	Resource.getHighlight = function(icon, w, h)		local texture, coords		local index = icon.index		local w, h		if index ==1 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.00390625, 0.14453125, 0.78906250, 0.96093750}			w, h = 36, 22		elseif index == 2 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.15234375, 0.27343750, 0.78906250, 0.92187500}			w, h = 31, 17		elseif index == 3 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.28125000, 0.38671875, 0.64843750, 0.81250000}			w, h = 27, 21		elseif index == 4 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.28125000, 0.38671875, 0.82812500, 0.92187500}			w, h = 27, 12		elseif index == 5 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.39453125, 0.49609375, 0.64843750, 0.74218750}			w, h = 26, 12		end						if not icon.highlight.set then			icon.highlight:SetTexture(texture)			icon.highlight:SetTexCoord(unpack(coords))			icon.highlight:SetAlpha(0)			icon.highlight.set = true		end				if (icon.lightW ~= w) or (icon.lightH ~= h) then			icon.highlight:SetSize(h, w)						icon.highlight:SetAllPoints(icon)			icon.lightW = w			icon.lightH = h		end			end	Resource.getShine = function(icon, w, h)		local texture, coords		local index = icon.index		local w, h		if index ==1 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.00390625, 0.14453125, 0.78906250, 0.96093750}			w, h = 36, 22		elseif index == 2 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.15234375, 0.27343750, 0.78906250, 0.92187500}			w, h = 31, 17		elseif index == 3 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.28125000, 0.38671875, 0.64843750, 0.81250000}			w, h = 27, 21		elseif index == 4 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.28125000, 0.38671875, 0.82812500, 0.92187500}			w, h = 27, 12		elseif index == 5 then			texture, coords =  [[Interface\PlayerFrame\PaladinPowerTextures]], {0.39453125, 0.49609375, 0.64843750, 0.74218750}			w, h = 26, 12		end						if not icon.shine.set then			icon.shine:SetTexture(texture)			icon.shine:SetTexCoord(unpack(coords))			icon.shine:SetAlpha(0)			icon.shine:SetBlendMode("ADD")			icon.shine.set = true		end				if (icon.shineW ~= w) or (icon.shineH ~= h) then			icon.shine:SetSize(h, w)						icon.shine:SetAllPoints(icon)			icon.shineW = w			icon.shineH = h		end	end	Resource.applyTexture = applyTexture	Resource.update = function(self)		local icons = self.icons		local maxPower = UnitPowerMax(self.owner.id, SPELL_POWER_HOLY_POWER)		local power = UnitPower(self.owner.id, SPELL_POWER_HOLY_POWER)				local icons = self.icons		for i, icon in pairs(icons) do		icon.base:SetAlpha(1)				icon.base:Show()			icon.index = i			if i <= maxPower then				if i > power then					Resource.applyTexture(self, Resource, icon, 1) --bg only									else					Resource.applyTexture(self, Resource, icon, 2) --show all				end			else				Resource.applyTexture(self, Resource, icon, 3) -- Hide			end		end	end	sources.HolyPower = Resourceend local function CleanResource(icons)	for i, icon in pairs(icons) do		icon.base:SetTexture("")		--icon.base:SetAlpha(0)	    icon.base:Hide()		icon.base.set = nil				icon.highlight:SetTexture("")		--icon.highlight:SetAlpha(0)		icon.highlight:Hide()		icon.highlight.set = nil				icon.shine:SetTexture("")		--icon.shine:SetAlpha(0)		icon.shine:Hide()		icon.shine.set = nil				--icon.cooldown:SetAlpha(0)		icon.cooldown:Hide()		icon.cooldown.set = nil	endendlocal  function DisplayResource(icons)	for i, icon in pairs(icons) do		icon:Show()	    icon.base:Show()		icon.highlight:Show()		icon.shine:Show()		--icon.cooldown:Show()	endendlocal function UpdateResource(self, unit)	local test = (self.TEST == true)	if ((player_class == "DRUID") and ((GetShapeshiftFormID() == CAT_FORM)) or test) or 		(player_class == "ROUGE") or UnitHasVehicleUI(unit) then		return sources.ComboPoints	elseif (player_class == "MAGE") then		return sources.ArcaneCharges	elseif (player_class == "MONK") then		return sources.Chi	elseif (player_class == "WARLOCK") then		return sources.Shards	elseif (player_class == "DEATHKNIGHT") then		return sources.Runes	elseif (player_class == "PALADIN") then		return sources.HolyPower	endend 	local Addon = _G[...]local modName = ...local title = "Resource"local widget = Addon:NewWidget(title, 'Frame')widget.defaults = {	display = {		circle = {			offset = 0,			rings = 4,			spin = 0,			spacing = 8,		},		bar = {			columns = 5,			rows = 4,		},		position = {			y = -55,			x = -70,			frameLevel = 4,			anchor = "TopRight",			frameStrata = 2,		},		advanced = {			offset = 0,			zoom = 5,			scale = 80,			opacity = 30,			spacing = 11,			enable = true,			fixed = true,			padding = 0,			auraTooltip = true,		},	},	visibility = {		border = {			color = {				a = 0.5,				r = 0,				g = 0,				b = 0,			},			file = "Blizzard",			thickness = 10,		},		background = {			enable = false,			file = "Raid",			color = {				a = 0.5,				r = 0,				g = 0,				b = 0,			},		},	},}	function widget:GetIcons()	if self then			endendfunction widget:GetRestrictions()	return "player", trueendfunction widget:New(parent)		local name = ('%s_%s_'..title):format(modName, parent.id)--	if _G[name] then return _G[name] end	local opac = CreateFrame('Frame', nil, parent.box)--opacity control	local bar = self:Bind(CreateFrame('StatusBar', name, opac))	bar:SetAllPoints(opac)	bar.owner = parent	bar.opac = opac	bar.drop = bar.drop or CreateFrame('Frame', nil, bar, "BackdropTemplate")	bar.drop:SetAllPoints(bar)	bar.center = CreateFrame("Frame", nil, bar)	bar.center:SetSize(20, 20)	bar.center:SetPoint("Center", bar)	return barendfunction widget:Load()	self:EnableMouse(false)	self.id = self.owner.id	self.icons = self.icons or {}	self.total = self.total or 0endfunction widget:Layout()	if self.sets.display.advanced.enable~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Show()	self:ResizeBar()	self:ResizeRound()	self:Reposition()		self:SetVisibility()		self:Update()endfunction widget:ResizeBar()	local icons = self.sets.display.bar	-- if icons.enable == true  then		-- self.sets.display.circle.enable = nil	-- else		-- self.sets.display.circle.enable = true		-- return	-- end		local adv = self.sets.display.advanced	local columns = icons.columns	local icons = self:GetIcons()	local rows =  ceil(max_points / columns)	local space = adv.spacing	local width, height	for i = 1, max_points do		local icon = self:GetOrCreateIcon(i)	end	local width, height = self.icons[1]:GetSize()			width, height =  width + space,  height + space	local barWidth = (width * columns) - space	local barHeight = (height * rows) - space		self.opac:SetSize(barWidth, barHeight)	local isLeftToRight = not adv.isLeftToRight	local isTopToBottom = adv.flipVertical		for i, icon in pairs(self.icons) do		local col, row = (columns-1) - (i-1) % columns, rows - ceil(i / columns)		if isLeftToRight then			col = (i-1) % columns		end		if isTopToBottom then			row = ceil(i / columns) - 1		end		icon:ClearAllPoints()		icon:SetPoint('TOPLEFT', width*col, -(height*row))		icon:Show()	end		self.opac:SetScale(adv.scale/100)	self.opac:SetAlpha(adv.opacity)		self.drop:ClearAllPoints()		local t = adv.padding/2		self.drop:SetPoint("TopLeft", -t, t)	self.drop:SetPoint("BottomRight", t, -t)endfunction widget:ResizeRound()		local circle = self.sets.display.circle	-- if circle.enable == true then		-- self.sets.display.bar.enable = nil	-- else		-- self.sets.display.bar.enable = true		-- return	-- end	local adv = self.sets.display.advanced		local rings = 12 - circle.rings	local offset = circle.offset			local spin = - ((449) - circle.spin)	local space = adv.spacing + 9	local rowspace = circle.spacing + 7		if not circle.enable then		return	end		spin = spin	space = space - 2.92	rowspace = rowspace * 2	local numButtons = #self.icons	local cols = min(numButtons/((numButtons+1) - rings), numButtons)	local rows = ceil(numButtons / cols)	local isLeftToRight = self.sets.IsLeftToRight	local isTopToBottom = self.sets.isTopToBottom	local size = 5 * (self.sets.scale/100)	-- grab base button sizes	local l, r, t, b = 0,0,0,0	local bW, bH = size, size	local pW, pH = 0,0	local diameter =  math.sqrt((bW^2) + (bH^2)) + space	local left, right, top, bottom	local base = 360/ceil(numButtons/rows)	local circumference = ((diameter) * ceil(numButtons/rows)) / (math.pi)	local left, right, top, bottom	for i, button in ipairs(self.icons) do		i = (numButtons +1) - i		local row = floor((i - 1) / cols)		if row == (rows) then			base = 360/floor(numButtons/rows)		end		row = (rows) - row		local angle = -(.5*base-(offset*row)+offset) + (base*i)		angle = math.rad(angle - spin)		local u = ((circumference + ((diameter*1.5) * (row-1)) + ((rowspace *row) - rowspace))/2) + self.sets.height		local v = ((circumference + ((diameter*1.5) * (row-1)) + ((rowspace *row) - rowspace))/2) + self.sets.width		local y, x = math.cos(angle)*u, -math.sin(angle)*v		if isTopToBottom then			y= -y		end		if isLeftToRight then			x = -x		end		if (left and x < left) or (not left) then			left = x		end		if (right and x > right) or (not right) then			right = x		end		if (bottom and y < bottom) or (not bottom) then			bottom = y		end		if (top and y > top) or (not top) then			top = y		end		button:ClearAllPoints()		button:SetPoint("Center", self.center, "Center", x , y)	end	diameter = (diameter/2) - 7.45	local w, h = (diameter*2) - left + right , (diameter*2) - bottom + top	self:SetSize( w + (pW*2) - space, h + (pH*2) - space)	local x, y = (w/2) - (right + diameter) , (h/2) - (top + diameter)	self.center:SetPoint("Center", self, x, y)endfunction widget:Reposition()	local position = self.sets.display.position	local scale = self.sets.display.advanced.scale/100	self.opac:ClearAllPoints()	self.opac:SetPoint(position.anchor, self.opac:GetParent(), position.x / scale, position.y / scale)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(position.frameLevel)	endfunction widget:SetIcons()	local icons = self.sets.display.icons	endfunction widget:SetVisibility()	local visibility = self.sets.visibility	local background = visibility.background	local border = visibility.border	local pad = background.padding		local BG = self:GetMediaPath("statusbar", background.file)	local brd = self:GetMediaPath("border", border.file)		if not background.enable then		BG = ""	end	if not border.enable then		brd = ""	end	self.drop:SetBackdrop({ 		bgFile = BG, 		edgeFile = brd,		tile = false,		edgeSize = border.thickness, 		insets = { left = pad, right = pad, top = pad, bottom = pad }	})	do		local color = background.color		self.drop:SetBackdropBorderColor(color.r, color.g, color.b, color.a)	end	do		local color = background.color		self.drop:SetBackdropColor(color.r, color.g, color.b, color.a)	endendfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate(elapsed)	if self.noUpdate then		return	end	self:DisplayOrder()endfunction widget:DisplayOrder()	if self.owner.id ~= "player" then		return	end	if #self.icons < max_points then		for i = 1, max_points do			self:GetOrCreateIcon(i)		end	end	self:SetIcons(Resource)endfunction widget:GetOrCreateIcon(i)	local icon = self.icons[i] or CreateFrame("Frame", nil, self)	if not self.icons[i] then		icon.base = icon:CreateTexture(nil, 'BACKGROUND')		icon.index = i		icon.highlight = icon:CreateTexture(nil, 'ARTWORK')		icon.shine = icon:CreateTexture(nil, 'OVERLAY')				icon.Border_animation = icon:CreateAnimationGroup();				icon.Border_animation.alpha = icon.Border_animation:CreateAnimation("Alpha");				icon.Border_animation.alpha:SetFromAlpha(0);				icon.Border_animation.alpha:SetToAlpha(1);				icon.Border_animation.alpha:SetDuration(.25);				icon.Border_animation.alpha:SetChildKey("highlight")				icon.Border_animation.scale = icon.Border_animation:CreateAnimation("Scale");				icon.Border_animation.scale:SetFromScale(.5, .5)				icon.Border_animation.scale:SetToScale(1, 1)				icon.Border_animation.scale:SetOrder(1);				icon.Border_animation.scale:SetSmoothing("OUT");				icon.Border_animation.scale:SetDuration(.25);				icon.Border_animation.scale:SetChildKey("highlight")				icon.Border_animation.parent = icon;								icon.Shine_animation = icon:CreateAnimationGroup();								icon.Shine_animation.alpha = icon.Shine_animation:CreateAnimation("Alpha");				icon.Shine_animation.alpha:SetFromAlpha(0);				icon.Shine_animation.alpha:SetToAlpha(1);				icon.Shine_animation.alpha:SetDuration(.1);				icon.Shine_animation.alpha:SetChildKey("shine")								icon.Shine_animation.Rotation = icon.Shine_animation:CreateAnimation("Rotation");				icon.Shine_animation.Rotation:SetDegrees(-60);				icon.Shine_animation.Rotation:SetDuration(0.4);				icon.Shine_animation.Rotation:SetSmoothing("OUT");				icon.Shine_animation.Rotation:SetChildKey("shine")								icon.Shine_animation.scale = icon.Shine_animation:CreateAnimation("Scale");				icon.Shine_animation.scale:SetOrder(1);				icon.Shine_animation.scale:SetDuration(.25);				icon.Shine_animation.scale:SetSmoothing("OUT");				icon.Shine_animation.scale:SetFromScale(1.25, 1.25)				icon.Shine_animation.scale:SetToScale(0.75, 0.75)				icon.Shine_animation.scale:SetChildKey("shine")				icon.Shine_animation.parent = icon;				icon.Shine_animation.alpha2 = icon.Shine_animation:CreateAnimation("Alpha");				icon.Shine_animation.alpha2:SetSmoothing("IN");				icon.Shine_animation.alpha2:SetFromAlpha(1);				icon.Shine_animation.alpha2:SetToAlpha(0);				icon.Shine_animation.alpha2:SetDuration(.25);				icon.Shine_animation.alpha2:SetStartDelay(.4);				icon.Shine_animation.alpha2:SetChildKey("shine")						icon.cooldown = CreateFrame("Cooldown", nil, icon, "CooldownFrameTemplate")		icon.cooldown:SetHideCountdownNumbers(true)		icon.cooldown:Hide()		icon.cooldown:SetPoint("Topleft", 0,1)		icon.cooldown:SetSize(15,15)				icon:SetSize(20, 20)		--self:ClearIcon(icon)		self.icons[i] = icon	end	return iconendfunction widget:SetIcons(Resource)	local Resource = UpdateResource(self, self.owner.id)	if Resource or (self.TEST == true) then				Resource.update(self)		DisplayResource(self.icons)	else		for i, icon in pairs(self.icons) do			self:ClearIcon(icon)		end	endendfunction widget:ClearIcon(icon)	if icon:IsShown() then		icon:Hide()		icon.base:SetTexture("")	    icon.base:Hide()		icon.base.set = nil		icon.highlight:SetTexture("")		icon.highlight:Hide()		icon.highlight.set = nil		icon.shine:SetTexture("")		icon.shine:Hide()		icon.shine.set = nil		icon.cooldown:Hide()		icon.cooldown.set = nil				icon.empty = true	endendwidget.Options = {	{		name = "Display",		kind = "Panel",		key = "display",		panel = "Display",		options = {			{				name = 'Columns',				kind = 'Slider',				key = 'columns',				min = 1,				max = max_points,				panel = 'bar',			},			{				name = 'Enable Circle',				kind = 'CheckButton',				key = 'enable',				panel = "circle",			},			{				name = 'Rings',				kind = 'Slider',				key = 'rings',				min = 1,				max = max_points,				panel = 'circle',			},			{				name = 'Spin',				kind = 'Slider',				key = 'spin',				min = -180,				max = 180,				panel = 'circle',			},			{				name = 'Offset',				kind = 'Slider',				key = 'offset',				min = 0,				max = 180,				panel = 'circle',			},			{				name = 'Spacing',				kind = 'Slider',				key = 'spacing',				min = -32,				max = 32,				panel = 'circle',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = "Frame Level",				kind = "Slider",				key = "frameLevel",				min = 1,				max = 100,				panel = 'position',			},			{				name = "Frame Strata",				kind = "Slider",				key = "frameStrata",				min = 1,				max = 8,				panel = 'position',			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},			{				name = 'Scale',				kind = 'Slider',				key = 'scale',				min = 25,				max = 200,				panel = 'advanced',			},						{				name = 'Disable',				kind = 'CheckButton',				key = 'disable',				panel = "advanced",			},			{				name = 'Flip Vertical',				kind = 'CheckButton',				key = 'flipVertical',				panel = "advanced",			},			{				name = 'Flip Horizontal',				kind = 'CheckButton',				key = 'isLeftToRight',				panel = "advanced",			},			{				name = 'Spacing',				kind = 'Slider',				key = 'spacing',				min = -32,				max = 32,				panel = 'advanced',			},			{				name = 'Opacity',				kind = 'Slider',				key = 'opacity',				min = 0,				max = 30,				panel = 'advanced',			},			{				name = 'Padding',				kind = 'Slider',				key = 'padding',				panel = "advanced",				min = -13,				max = 32,			},			{				kind = "Button",				name = "Test Mode",				handler = "resource",				func = function(owner)					owner.TEST = not owner.TEST					owner:Layout()				end,				panel = "advanced",			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},}