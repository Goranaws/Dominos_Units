local Goalie = CreateFrame("Frame")function Goalie:Load(parent)	parent.sets = parent.sets or {}	parent.sets.Goal = parent.sets.Goal or {}	parent.Flasher = parent.Flasher or parent:CreateTexture(nil, "ARTWORK")	parent.Flasher:SetTexture("Interface\\FullScreenTextures\\LowHealth")	parent.Flasher:SetAllPoints(parent)	parent.Flasher:SetAlpha(0)endfunction Goalie:SetGoal(parent, name, goal)	local data = parent.sets.currency.Goal	data[name] = goalendfunction Goalie:UpdateGoal(parent, name, currentValue)	if not parent.sets.Goal then		return	end	local data = parent.sets.Goal[name]	if data and (currentValue >= data) then		Goalie:GoalMet(parent)	else		parent.Flasher:SetAlpha(0)	endendlocal Max = 1local Half = Max/2local Time function Goalie:GoalMet(parent)	Time = Time or GetTime()	local t =  GetTime() - Time	local alpha = (math.abs(Half-t)/Max)	parent.Flasher:SetAlpha(alpha)	if t > Max then		Time = GetTime()	endendfunction Goalie:DisplayGoal(parent, name, currentValue)	parent.sets.Goal = parent.sets.Goal or {}	local data = parent.sets.Goal[name]	if (not data) then return end	if data and (currentValue >= data) then		print("Goal Met! ".. name..": "..data)		Goalie:ClearGoal(parent, name)	endendfunction Goalie:ClearGoal(parent, name)	parent.sets.Goal[name] = nilendlocal Addon = _G[...]local modName = ...local widget = Addon:NewWidget('currency', 'Frame')widget.Events = {	["PLAYER_MONEY"] = 1,	["ARTIFACT_UPDATE"] = 1,	["ARTIFACT_XP_UPDATE"] = 1,	["CURRENCY_DISPLAY_UPDATE"]  = 1,	["UPDATE_FACTION"] = 1,	["LFG_BONUS_FACTION_ID_UPDATED"] = 1,}function widget:New(parent)    if parent.id ~= "player" then        return    end	local name = ('%s_%s_currencyBar'):format(modName, parent.id)	if _G[name] then		return _G[name]	end	local bar = self:Bind(CreateFrame('Frame', name, parent.box))	bar.owner = parent	bar.watchIndex = 1	bar:SetSize(200,15)	bar.text = bar:CreateFontString(nil, 'ARTWORK', 'GameFontNormalSmall')	bar.text:SetHeight(15)	bar.text:SetJustifyH("LEFT")	bar.text:SetPoint("Left")	bar.displayIcon = bar:CreateTexture(nil, "ARTWORK")	bar.displayIcon:SetSize(15, 15)	bar.displayIcon:SetPoint("Right")		bar.count = bar:CreateFontString(nil, 'ARTWORK', 'GameFontNormalSmall')	bar.count:SetHeight(15)	bar.count:SetJustifyH("Right")	bar.count:SetPoint("Left", bar.text , "Right",3,0)	bar.count:SetPoint("Right", bar.displayIcon , "Left",-3,0)		local v = bar:GetFrameLevel()-2	if v < 1 then v = 1 end	bar.drop = bar.drop or CreateFrame('StatusBar', nil, bar)	bar.drop:SetMinMaxValues(0,1)	bar.drop:SetValue(1)	bar.drop:SetPoint("TopLeft", bar.text)	bar.drop:SetPoint("BottomRight", bar.displayIcon)		bar.drop:SetFrameLevel(v)		bar.owner = parent	bar.title = title	bar.handler = parent.id			bar.mouseManager = CreateFrame("Frame", nil, bar)	bar.mouseManager:SetPoint("TopLeft", bar.text)	bar.mouseManager:SetPoint("BottomRight", bar.displayIcon)	bar.mouseManager:SetScript("OnEnter", self.OnEnter)	bar.mouseManager:SetScript("OnLeave", self.OnLeave)	bar.mouseManager:SetScript("OnMouseWheel", self.OnMouseWheel)		Goalie:Load(bar)		return barendlocal function round(val, decimal)  if (decimal) then    return math.floor( (val * 10^decimal) + 0.5) / (10^decimal)  else    return math.floor(val+0.5)  endendlocal currentTrack, currentInfofunction widget:OnEnter()	local parent = self:GetParent()	if currentTrack then		local name = currentTrack		if not ((name == "Gold") or (name == "Armor")) then			GameTooltip:Hide()			return		end			GameTooltip:SetOwner(self, "ANCHOR_TOPRIGHT")		GameTooltip:SetText(name)		local tip		local tip = math.abs(parent.sets.lifeTime[name])		if name == "Gold" then			tip = GetCoinTextureString(tip)		end			if currentInfo then			for i, info in pairs(currentInfo) do				GameTooltip:AddDoubleLine(info.slot, round(info.value, 1))			end		end				if not currentInfo then			if parent.sets.Goal[currentTrack] then			GameTooltip:AddDoubleLine("Goal:",  tonumber(parent.sets.Goal[currentTrack]))			end		end		GameTooltip:Show()	endendfunction widget:OnLeave()	GameTooltip:Hide()	if self:GetParent().sets.advLog then	endend	function widget:OnMouseWheel(delta)	local self = self:GetParent()	local numWatched = self:GetNumWatched()			if self.sets then		if not self.sets.watchIndex then			self.sets.watchIndex = 1		end		self.sets.watchIndex = self.sets.watchIndex + delta				if self.sets.watchIndex > numWatched then			self.sets.watchIndex = 1		elseif self.sets.watchIndex < 1 then			self.sets.watchIndex = numWatched		end	end	if MouseIsOver(self.mouseManager) then		self:Update()		self.mouseManager:GetScript("OnEnter")(self.mouseManager)	endendwidget.defaults =  {	ThisSession = {},	visibility = {		border = {			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			file = "Blizzard",			thickness = 10,		},		background = {			enable = false,			file = "Raid",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},	},	fontcolor = {		a = 1,		r = 1,		g = 1,		b = 0,	},	basic = {		position = {			y = -150,			x = 0,			frameLevel = 4,			anchor = "Bottom",			frameStrata = 2,			width = 200		},		text = {			enable = true,			file = "Friz Quadrata TT",			color = {				a = 1,				b = 0,				g = 1,				r = 1,			},			size = 9,		},		advanced = {},	},}	function widget:Load()    if self.owner.id ~= "player" then        return    end	self:EnableMouse(false)	self.noMouse = true	self.id = self.owner.id	self.sets.ThisSession = {}endfunction widget:Layout()	if self.sets.basic.advanced.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:LayoutText()	self:SetVisibility()endfunction widget:Reposition()	local position = self.sets.basic.position		self:ClearAllPoints()	self:SetPoint(position.anchor, self:GetParent(), position.x, position.y)		self:SetWidth(position.width)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(position.frameLevel)	endfunction widget:LayoutText()	local text = self.text			local font = self.sets.basic.text	self.text:SetFont(self:GetMediaPath("font", font.file), font.size or 12)	self.text:SetTextColor(font.color.r, font.color.g, font.color.b, font.color.a)	self.count:SetFont(self:GetMediaPath("font", font.file), font.size or 12)	self.count:SetTextColor(font.color.r, font.color.g, font.color.b, font.color.a)endfunction widget:SetVisibility()	local visibility = self.sets.visibility	local background = visibility.background	local border = visibility.border	local pad = background.padding		local BG = self:GetMediaPath("statusbar", background.file)	local brd = self:GetMediaPath("border", border.file)		if not background.enable then		BG = ""	end	if not border.enable then		brd = ""	end	-- self.drop:SetBackdrop({ 		-- bgFile = BG, 		-- edgeFile = brd,		-- tile = false,		-- edgeSize = border.thickness, 		-- insets = { left = pad, right = pad, top = pad, bottom = pad }	-- })	-- do		-- local color = background.color		-- self.drop:SetBackdropBorderColor(color.r, color.g, color.b, color.a)	-- end	-- do		-- local color = background.color		-- self.drop:SetBackdropColor(color.r, color.g, color.b, color.a)	-- endendfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:UpdateTracked(name, currencyValue,info)	local ThisSession = self.sets.ThisSession	local lifeTime = self.sets.lifeTime	local lifeTime_Track = self.sets.lifeTime_Track	lifeTime_Track[name] = lifeTime_Track[name] or {}	self.PrevCount = self.PrevCount or {}		if not self.PrevCount[name] then		ThisSession[name] = 0		lifeTime[name] = lifeTime[name] or 0		self.PrevCount[name] = currencyValue	end			if self.PrevCount[name] ~= currencyValue then		ThisSession[name] = ThisSession[name] + (currencyValue - self.PrevCount[name])		lifeTime[name] = lifeTime[name] + (currencyValue - self.PrevCount[name])				tinsert(lifeTime_Track[name], ThisSession[name])	end	self.PrevCount[name] = currencyValue	endlocal durability = {}local function DurabilityFrame_GetAlerts()	local damage, maximum = 0, 0	wipe(durability)	for index, value in pairs(INVENTORY_ALERT_STATUS_SLOTS) do		local current, base  = GetInventoryItemDurability(index)		if current then			tinsert(durability, {slot = value.slot, value = (current/base) * 100})			damage = damage + current			maximum = maximum + base		end	end	return round((damage/maximum) * 100, 1) , durabilityendlocal track = {	{		name = "Armor",		icon = "Interface\\COMMON\\FavoritesIcon",		value = function()			local damage, maximum = 0, 0			wipe(durability)			for index, value in pairs(INVENTORY_ALERT_STATUS_SLOTS) do				local current, base  = GetInventoryItemDurability(index)				if current then					tinsert(durability, {slot = value.slot, value = (current/base) * 100})					damage = damage + current					maximum = maximum + base				end			end			return round((damage/maximum) * 100, 1) , durability		end	},	{		name = "Gold",		value = function()			return GetCoinTextureString(GetMoney())		end	},}local GetTokensdo	local tokens = {}	function GetTokens(index)		wipe(tokens)		-- for i=1, GetNumWatchedTokens() do			-- local name, count, icon = GetBackpackCurrencyInfo(i)			-- if name then				-- tinsert(tokens, {name = name, value = count, icon = icon, info = nil})			-- end		-- end		-- for i, info in pairs(track) do			-- local current, inf, texture  = info.value()			-- tinsert(tokens, {name = info.name, value = current, icon = info.icon or texture, info = inf })		-- end				return tokens	endendlocal function GetTokenInfo(index)	local tokens  = GetTokens()	local token = tokens[index]	if not token then		return	end	return token.name, token.value, token.icon, token.infoendfunction widget:GetNumWatched()	return GetNumWatchedTokens() + #trackendfunction widget:OnUpdate(elapsed)    if self.owner.id ~= "player" then        return    end	if (self.sets.basic.advanced.enable ~= true) or self.noUpdate then		return	end	self.PrevCount = self.PrevCount or {}	local autoWatch = self.sets.watchIndex	self.watching = self.watching or {}	for i, token in pairs(GetTokens()) do		local name, value, icon, info = token.name, token.value, token.icon, token.info		local prevValue = self.watching[name]		if prevValue and (value ~= prevValue) then			autoWatch = i			self.sets.watchIndex = i		end		if name then			self.watching[name] = value		end	end	local name, count, icon, info = GetTokenInfo(autoWatch)	if not name then		return	end	currencyValue = tonumber(count) or 0	currentTrack = name	currentInfo = info	if (self.PrevName ~= name) or (self.PrevCount[name] ~= currencyValue) then		--self:UpdateTracked(name, currencyValue, info)		currentTrack = name		currentInfo = info		if self.text then			self.text:SetText(name)		end		self.count:SetText(count)		if (icon == "") or (icon == nil) then			self.displayIcon:SetTexture("")			self.displayIcon:SetPoint("Left", self, "Right", 0, 0)		else			self.displayIcon:SetTexture(icon)			self.displayIcon:SetPoint("Left", self, "Right", -15, 0)		end	end	currentTrack = name 	Goalie:UpdateGoal(self, name, currencyValue)	self.PrevName = name	if MouseIsOver(self)then		Goalie:DisplayGoal(self, name, currencyValue)	end	endwidget.bg = {	bgFile = 'Interface\\Tooltips\\UI-Tooltip-Background',	insets = {left = 0, right = 0, top = 0, bottom = 0},	tile = false,}function widget:GetRestrictions()	return "player", trueendwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Font',				kind = 'Media',				key = 'file',				mediaType = 'Font',				panel = 'text',			},			{				name = 'Size',				kind = 'Slider',				key = 'size',				min = 1,				max = 25,				panel = 'text',			},			{				name = 'Color',				kind = 'ColorPicker',				key = 'color',				panel = 'text',			},			{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Width',				kind = 'Slider',				key = 'width',				panel = 'position',				min = 75,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},                    {                        name = 'Auto Track',                        kind = 'CheckButton',                        key = 'AutoWatch',						panel = "advanced",                    },					-- [[                    {                        name = 'Set Goal',                        kind = 'EditBox',                        key = function(self)							if currentTrack and self.sets.currency.Goal and self.sets.currency.Goal[currentTrack] then								return self.sets.currency.Goal[currentTrack], currentTrack							else								return "", currentTrack							end						end,						setter = function(self, text)							if currentTrack then								Goalie:SetGoal(self, currentTrack, tonumber(text))							end						end,						panel = "goal",                    },					--]]		{			name = "Frame Level",			kind = "Slider",			key = "frameLevel",			panel = 'position',			min = 1,			max = 100,		},		{			name = "Frame Strata",			kind = "Slider",			key = "frameStrata",			panel = 'position',			min = 1,			max = 7,		},			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "advanced",			},		}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},}