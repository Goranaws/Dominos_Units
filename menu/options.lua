Dominos.Options = {}local create = {}Dominos.Options.create = createfunction create.Slider(panel, name, key, min, max, step)	return panel:NewSlider(name, min, max, step or 1,		function(self)			self:SetValue(self:GetParent().owner.sets[panel.name][key])		end,		function(self) 			local owner = self:GetParent().owner			owner.sets[panel.name][key] = self:GetValue()			owner:Layout()		end	)endfunction create.CheckButton(panel, name, key)	local c = panel:NewCheckButton(name)	c:SetScript("OnShow",		function(self)			self:SetChecked(panel.owner.sets[panel.name][key])		end	)	c:SetScript("OnClick",		function(self)			local owner = panel.owner			owner.sets[panel.name][key] = self:GetChecked() or false			owner:Layout()		end	)	return cendlocal function newButton(menu, name, isColor)	local b = CreateFrame("Button", menu:GetName()..name, menu, "UIMenuButtonStretchTemplate")	b:SetSize(140, 25)	b:SetText(name)	b.text = b:CreateFontString(nil, "ARTWORK", "GameFontNormal")	b.text:SetDrawLayer(BACKGROUND)	if isColor then		b.texture = b:CreateTexture(nil, "BACKGROUND")		b.texture:SetDrawLayer("BACKGROUND", -8)		b.texture:SetTexture('Interface\\Tooltips\\UI-Tooltip-Background')	else		b.texture = CreateFrame("Frame", b:GetName().."texture", b)		b.texture:SetFrameLevel(1)	end		b.text:SetDrawLayer("ARTWORK", 7)			b.texture:SetPoint("TopLeft", b, "BottomLeft")	b.texture:SetPoint("TopRight", b, "BottomRight")	b.texture:SetHeight(25)	b.text:SetAllPoints(b.texture)	local prev = menu.checkbutton	if prev then		b:SetPoint('TopLeft',  prev, 'BottomLeft', 0, -2)	else		b:SetPoint('TOPLEFT', 2, 0)	end	menu.checkbutton = b	menu.height = menu.height + 52	return bendfunction create.EditBox(p, name, key, setter)	local editBox = CreateFrame('EditBox', p:GetName() .. name, p,  'InputBoxTemplate')	editBox:SetHeight(20)	editBox:SetAutoFocus(false)	local set = CreateFrame('Button', editBox:GetName()..'Set', p, 'UIPanelButtonTemplate')		local flip, flop = name, "Set"		local hold = false	local isLocked = false	local function flipText(why)		local text = flip		if why == 'lock' then 			isLocked = true		elseif why == 'unlock' then 			isLocked = false		end				if isLocked == true then			text = flop		else			text = flip		end				if (why == 'OnEnter') then			if isLocked == true then				text = flip			else				text = flop			end		elseif (why == 'OnLeave')  then			if isLocked == true then				text = flop			else				text = flip			end		end 		set:SetText(text)	end	set:SetScript('OnEnter', function(self)		flipText('OnEnter')	end)		set:SetScript('OnLeave', function(self)		flipText('OnLeave')	end)	editBox:SetScript('OnShow', function(self)		self:SetText(self:GetParent().owner.sets[p.name][key] or '')	end)		editBox:SetScript('OnEscapePressed', function(self)		self:SetText(self:GetParent().owner.sets[p.name][key] or '')		self:ClearFocus()	end)	editBox:SetScript('OnEnterPressed', function(self)		local text = self:GetText()		setter(self:GetParent().owner, text ~= '' and text or nil)		self:SetText(self:GetParent().owner.sets[p.name][key] or '')		self:ClearFocus()	end)	editBox:SetScript('OnEditFocusLost', function(self) self:HighlightText(0, 0) flipText('unlock') end)	editBox:SetScript('OnEditFocusGained', function(self) self:HighlightText() flipText('lock') end)	set:SetHeight(20)	set:SetText(name)	set:SetScript('OnClick', function(self)		editBox:GetScript('OnEnterPressed')(editBox)	end)		editBox:SetPoint('Left', set, 'Right', 0, 0)	editBox:SetPoint("Right", p)	local prev = p.checkbutton	if prev then		set:SetPoint('TOP', prev, 'BOTTOM', 0, -2)	else		set:SetPoint('TOPLEFT', 3, 0)	end	p.checkbutton = set			p.height = p.height + 20	return pendfunction create.Menu(menu, name, key, table)	local f = CreateFrame("Frame", menu:GetName()..name, menu)	f:SetSize(24, 24)	f.button = CreateFrame("Button", f:GetName().."Button", f)	f.button:SetPoint("Top")	f.button:SetSize(24, 24)	f.button:SetNormalTexture("Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Up")	f.button:SetPushedTexture("Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Down")	f.button:SetDisabledTexture("Interface\\ChatFrame\\UI-ChatIcon-ScrollDown-Disabled")	f.button:SetHighlightTexture("Interface\\Buttons\\UI-Common-MouseHilight")	f.text = f:CreateFontString(f:GetName() .. 'Text', "OVERLAY", "GameFontHighlightSmall")	f.text:SetPoint("BottomLeft", f.button, "BottomRight", 6, 2)	f.text:SetJustifyH('LEFT')	local title = f:CreateFontString(nil, "OVERLAY", "GameFontNormalSmall")	title:SetPoint("TopLeft", f.button, "TopRight", 4, -2)	title:SetText(name)		f:SetScript('OnShow', function(self)		if self ~= f then			return		end		f:initialize()		f.text:SetText(f:GetParent().owner.sets[menu.name][key])		if not self.stretch then			self.stretch = 1			f.button:SetHitRectInsets(0, -(title:GetCenter()+ (title:GetWidth()/2)- f.button:GetCenter()+ (f.button:GetWidth()/2)), 0, 0)		end	end)	f:SetScript("OnHide", function() CloseDropDownMenus() end)	f.button:SetScript("OnClick", function(self)		UIDropDownMenu_SetAnchor(f, -4, 6, "TopLeft", f.button, "BottomLeft")		ToggleDropDownMenu(1, nil, f)		PlaySound("igMainMenuOptionCheckBoxOn")	end)	function f:initialize()		local owner = menu.owner		local info = UIDropDownMenu_CreateInfo()		for i, anchor in ipairs(table) do			wipe(info)			info.text = anchor			info.func = function(item, name)				owner.sets[menu.name][key] = name				owner:Layout()				f.text:SetText(name)			end			info.checked = (anchor == owner.sets[menu.name][key])			info.arg1 = anchor			UIDropDownMenu_AddButton(info)		end	end	local dropDownList = _G["DropDownList"..1]	dropDownList.dropdown = f	dropDownList.shouldRefresh = true		local prev = menu.checkbutton	if prev then		f:SetPoint('TOP', prev, 'BOTTOM', 0, -0)	else		f:SetPoint('TOPLEFT', 2, -5)	end	f.point = {f:GetPoint()}	menu.checkbutton = f.button	f.button:SetHitRectInsets(0, 0 , 0, 0)	menu.height = menu.height + 24	return fendlocal function ShowColorPicker(r, g, b, a, changedCallback)	ColorPickerFrame.hasOpacity, ColorPickerFrame.opacity = nil, nil	ColorPickerFrame.func, ColorPickerFrame.opacityFunc, ColorPickerFrame.cancelFunc = nil, nil, nil	ColorPickerFrame:SetColorRGB(r,g,b)	ColorPickerFrame.hasOpacity, ColorPickerFrame.opacity = (a ~= nil), a	ColorPickerFrame.previousValues = {r,g,b,a}	ColorPickerFrame.func, ColorPickerFrame.opacityFunc, ColorPickerFrame.cancelFunc = changedCallback, changedCallback, changedCallback	ColorPickerFrame:Hide() -- Need to run the OnShow handler.	ColorPickerFrame:Show()endfunction create.ColorPicker(menu, name, key, handler) --this thing needs help.	local button = CreateFrame("Button", menu:GetName()..name, menu)	button:SetSize(24, 24)	button:SetHitRectInsets(0,-75,0,0)	local text = button:CreateFontString(nil, "OVERLAY", "GameFontNormal")	text:SetText(name)	text:SetPoint("Left", button, "Right", 5, 0)	button:SetPushedTexture("Interface\\Buttons\\UI-Quickslot-Depress")	button:SetHighlightTexture("Interface\\Buttons\\ButtonHilight-Square")	button:GetHighlightTexture():SetBlendMode("ADD")	button:SetNormalTexture('Interface\\Tooltips\\UI-Tooltip-Background')	local border = button:CreateTexture(nil, "OVERLAY")	border:SetAllPoints(button)	border:SetTexture("Interface\\BUTTONS\\UI-Quickslot2")	border:SetTexCoord(.2,.8,.2,.8)	button:SetScript("OnShow", function(self)		local saved = menu.owner.sets[string.lower(menu.name)][key]		if saved then			button:GetNormalTexture():SetVertexColor(saved.r, saved.g, saved.b, saved.a)		end	end)	button:SetScript("OnClick", function(self)		local saved = menu.owner.sets[handler][key]		local r, g, b, a = saved.r, saved.g, saved.b, saved.a		ShowColorPicker(r, g, b, a, function(restore)			local newR, newG, newB, newA			if restore then				newR, newG, newB, newA = unpack(restore)			else				newA, newR, newG, newB = OpacitySliderFrame:GetValue(), ColorPickerFrame:GetColorRGB()			end			saved.r, saved.g, saved.b, saved.a = newR, newG, newB, newA			self:GetScript("OnShow")(self)			menu.owner:Layout()		end)	end)	local prev = menu.checkbutton	if prev then		button:SetPoint('TopLeft',  prev, 'BottomLeft', 0, -2)	else		button:SetPoint('TOPLEFT', 2, 0)	end	menu.checkbutton = button	menu.height = menu.height + 24	return buttonendfunction create.Media(panel, name, key, handler, mediaType)--panel, 'Background', 'Background', 'GetBackground', 'SetBackground'	local button = Dominos.MediaPanel:NewMediaButton(panel, name, mediaType)	handler = string.lower(panel.name)		button.get = function()		local owner = panel.owner		return owner.sets[handler][key]	end	button.set = function(...)		local owner = panel.owner		owner.sets[handler][key] = ...		owner:Layout()	end		button:SetScript('OnClick', function()			local medi = Dominos.MediaPanel:Display(panel, button, mediaType, get, set)			medi.get = function() return button.get() end			medi.set = function(...) return button.set(...) end			medi:UpdateList()			medi:Show()		end)	return buttonendfunction create.Panel(menu, name, options)	local panel = menu:NewPanel(string.lower(name))	for name, info in pairs(options) do		local func = create[info.kind]		o = func(panel, info.name, info.key, info.min or info.table or info.handler, info.max or info.mediaType, info.step)	end	return panelend