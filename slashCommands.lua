local bar = _G[...]local frames = bar.frameslocal function check(source, target)	if not target then 		target = {}	end	for key, value in pairs(source) do		if type(value) == 'table' then			target[key] =check(value, target[key])		else			if (type(value) == 'boolean') then				if target[key] == nil then					target[key] = value 				end 			else 				target[key] = target[key] or value 			end		end	end	return targetend--viable unit checklocal base = {	'player',	'target',	'playerpet',	'focus',	'arena%d+',	'boss%d+',	'party%d+',	'partypet%d+',	'raid%d+',	'raidpet%d+',	'mouseover',}local max = {	raid = 40,	raidpet = 40,	arena = 4,	boss = 4,	party = 4,	partypet = 4,}local function IsViable(unit)	local keep = unit	unit = string.lower(unit)	local count = 0	if string.match (unit, 'target' , 2) then		_, count = string.gsub(string.sub (unit, 2, string.len(unit)), 'target', '')		if (unit == 'player') and count > 0 then			return nil		else			unit = string.gsub (unit, 'target', '', count)		end	end		for i, test in pairs(base) do		if string.match(unit, test) then			return string.lower(keep)			end	endendbar.master.IsViable = IsViablelocal commands = bar.master:GetModule('SlashCommands')local oldOnCmd = commands.OnCmdfunction commands:OnCmd(message)	local arg1, arg2, arg3  = string.split(' ', message)	if arg1:lower() == 'unit' then		if (arg2:lower() == 'new') then			local unit = arg3:lower()			if not IsViable(unit) then				print('invalid unit! :(', unit)				return			end			bar.getSets().frames[unit] = true			if frames[unit] then				if frames[unit].frameOverlay then					frames[unit].frameOverlay:Show()				end				frames[unit]:Restore()				frames[unit]:Show()				frames[unit]:EnableMouse(true)			end			frames[unit] = frames[unit] or bar:New(unit)			frames[unit]:Reload()			if LibStub and LibStub('LibKeyBound-1.0') then				LibStub('LibKeyBound-1.0'):Deactivate()			end			bar.master:GetModule('ConfigOverlay'):Show()		elseif  (arg2:lower() == 'delete') then			bar.getSets().frames[arg3:lower()] = nil			if frames[arg3:lower()] then				frames[arg3:lower()]:Delete()				frames[arg3:lower()].frameOverlay:Hide()			end			if LibStub and LibStub('LibKeyBound-1.0') then				LibStub('LibKeyBound-1.0'):Deactivate()			end			bar.master:GetModule('ConfigOverlay'):Show()		elseif  (arg2:lower() == 'show') then			if _G[arg3] then				bar.getSets().hide[arg3] = nil				_G[arg3]:SetParent(_G[arg3].par_ent)			end		elseif  (arg2:lower() == 'hide') then			if _G[arg3] and not (bar.getSets().hide[arg3]) then				bar.getSets().hide[arg3] = true				_G[arg3].par_ent = _G[arg3].par_ent or _G[arg3]:GetParent()				_G[arg3]:SetParent(MainMenuBarArtFrame)			end		end	else		oldOnCmd(message)	endend