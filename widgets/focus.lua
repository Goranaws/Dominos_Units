local Addon = _G[...]local modName = ...local title = "Focus"local Masque = LibStub('Masque', true)local TEXTURE = [[Interface\Addons\]]..modName..[[\textures\Focus]]local widget = Addon:NewWidget(title, 'Button')widget.defaults = {	visibility = {		border = {			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},			file = "Blizzard",			thickness = 10,		},		background = {			enable = false,			file = "Raid",			color = {				a = 0.5,				b = 0,				g = 0,				r = 0,			},		},	},	basic = {		icon = {			enable = true,			zoom = 0,			scale = 61,			clickThrough = false,		},		position = {			y = -3,			x = -5,			frameLevel = 4,			anchor = "TopRight",			frameStrata = 1,		},	},}function widget:New(parent)		local bar = CreateFrame('Button', nil, parent.box, 'SecureActionButtonTemplate')	self:Bind(bar)	bar.owner = parent	bar.icon = bar:CreateTexture(nil, 'ARTWORK')	bar.icon:SetPoint("CENTER")		bar:SetNormalTexture("")	bar.id = "focus"		bar:SetFrameLevel(parent:GetFrameLevel()+ 10)	bar:SetSize(32, 32)	bar.icon:SetTexture(TEXTURE)	bar.drop = bar.drop or CreateFrame('StatusBar', nil, bar)	bar.drop:SetMinMaxValues(0,1)	bar.drop:SetValue(1)	bar.drop:SetAllPoints(bar)		local v = bar:GetFrameLevel()-2	if v < 1 then v = 1 end		bar.drop:SetFrameLevel(v)		bar.owner = parent	bar.title = title	bar.handler = parent.id	return barendlocal function GetClassColors()	return CUSTOM_CLASS_COLORS or RAID_CLASS_COLORSendfunction widget:Load()	self:SetAttribute('unit', self.owner.id)	self:RegisterForClicks('AnyUp')	self:SetAttribute('*type1', 'target')				if self.owner.id ~= 'focus' then		self:SetAttribute('*type2', 'focus')				self.Tooltip = 'Right-Click to Set Focus.'	else		self:SetAttribute('*type2', 'macro')		self:SetAttribute('macrotext', '/clearfocus')		self.Tooltip = 'Right-Click to Clear Focus.'	end	if not self.masqued then		self.masqued = true					if Masque then				local group = Masque:Group(modName, "Focus Macros")				group:AddButton(self, { Icon = self.icon, Border = self.IconBorder})				if group.db.disabled then					self:ApplyDefaultTheme(self)				end			end			end	self:Show()	self:EnableMouse(true)	self:SetScript('OnEnter', self.OnEnter)	self:SetScript('OnLeave', self.OnExit)endfunction widget:ApplyDefaultTheme()	if not self.sets.basic.icon.fixed then		SetPortraitTexture(self.icon, self.owner.id)		if (not self.icon:GetTexture()) or (self.icon:GetTexture() == "") then			self.icon:SetTexture(TEXTURE)		end		self.icon:SetVertexColor(1, 1, 1)	else		local localizedClass, englishClass = UnitClass(self.owner.id)		local classColor = GetClassColors()[englishClass]		if classColor then			r, g, b = classColor.r, classColor.g, classColor.b		else			r, g, b = 1, 1, 1		end		if self.icon:GetTexture() ~= TEXTURE then			self.icon:SetTexture(TEXTURE)		end		self.icon:SetVertexColor(r, g, b)	endendfunction widget:Layout()	if self.sets.basic.icon.enable ~= true then		self:Hide()		self.noUpdate = true		return	else		self:Show()		self.noUpdate = nil	end	self:Update()	self:Reposition()		self:Resize()	self:SetVisibility()		if self:GetParent().unitButton then		self:GetParent().unitButton:SetFrameStrata("BACKGROUND")	end	local s = true	if self.sets.basic.icon.clickThrough and self.sets.basic.icon.clickThrough == true then		s = false	end	self:EnableMouse(s)	endfunction widget:Reposition()	local position = self.sets.basic.position	local icon = self.sets.basic.icon		self:ClearAllPoints()	self:SetPoint(position.anchor, self:GetParent(), position.x, position.y)		local lay = Addon.layers[position.frameStrata]	self:SetFrameStrata(lay)	self:SetFrameLevel(position.frameLevel)	endfunction widget:Resize()	local icon = self.sets.basic.icon	self:SetSize(icon.scale, icon.scale)	self.icon:SetSize(icon.scale, icon.scale)endfunction widget:SetVisibility()	local visibility = self.sets.visibility	local background = visibility.background	local border = visibility.border	local pad = background.padding		local BG = self:GetMediaPath("statusbar", background.file)	local brd = self:GetMediaPath("border", border.file)		if not background.enable then		BG = ""	end	if not border.enable then		brd = ""	end	-- self.drop:SetBackdrop({ 		-- bgFile = BG, 		-- edgeFile = brd,		-- tile = false,		-- edgeSize = border.thickness, 		-- insets = { left = pad, right = pad, top = pad, bottom = pad }	-- })	-- do		-- local color = background.color		-- self.drop:SetBackdropBorderColor(color.r, color.g, color.b, color.a)	-- end	-- do		-- local color = background.color		-- self.drop:SetBackdropColor(color.r, color.g, color.b, color.a)	-- endendfunction widget:Update()	if self.noUpdate then		return	end	if self.OnUpdate then		self:OnUpdate()	endendfunction widget:GetMediaPath(kind, fileName)	if Addon.lib then		return Addon.lib:Fetch(kind, fileName)	endendfunction widget:OnUpdate()	local unit = self.owner.id		if not self.sets.basic.icon.fixed then		self.icon:AddMaskTexture("Interface\\FullScreenTextures\\LowHealth")		SetPortraitTexture(self.icon, unit)		if (not self.icon:GetTexture()) or (self.icon:GetTexture() == "") then			self.icon:SetTexture(TEXTURE)		end				self.icon:SetVertexColor(1, 1, 1)		--local tcoords = PAPERDOLL_SIDEBARS[self:GetID()].texCoords;		--self.Icon:SetTexCoord(tcoords[1], tcoords[2], tcoords[3], tcoords[4]);									else		local localizedClass, englishClass = UnitClass(unit)		local classColor = GetClassColors()[englishClass]		if classColor then			r, g, b = classColor.r, classColor.g, classColor.b		else			r, g, b = 1, 1, 1		end		if self.icon:GetTexture() ~= TEXTURE then			self.icon:SetTexture(TEXTURE)		end		self.icon:SetVertexColor(r, g, b)	end	local zoom =  self.sets.basic.icon.zoom/100	self.icon:SetTexCoord(zoom,1-zoom,zoom,1-zoom)endfunction widget:OnEnter()	UnitFrame_OnEnter(self:GetParent())	GameTooltip:AddLine(self.Tooltip)	GameTooltip:AppendText('')endfunction widget:OnExit()    if MouseIsOver(self:GetParent()) then	    UnitFrame_OnEnter(self:GetParent())    else	    UnitFrame_OnLeave(self:GetParent())    endendwidget.Options = {	{		name = "Basic",		kind = "Panel",		key = "basic",		panel = "Basic",		options = {			{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "icon",			},			{				name = 'Click Through',				kind = 'CheckButton',				key = 'clickThrough',				panel = "icon",			},												{				name = 'Fixed Icon',				kind = 'CheckButton',				key = 'fixed',				panel = "icon",			},			{				name = 'Zoom',				kind = 'Slider',				key = 'zoom',				min = -50,				max = 100,				panel = 'icon',			},			{				name = 'Scale',				kind = 'Slider',				key = 'scale',				min = 10,				max = 150,				panel = 'icon',			},		   {				name = 'Click Through',				kind = 'CheckButton',				key = 'disableMouse',				panel = "icon",			},						{				name = 'X Offset',				kind = 'Slider',				key = 'x',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Y Offset',				kind = 'Slider',				key = 'y',				panel = 'position',				min = -400,				max = 400,			},			{				name = 'Anchor',				kind = 'Menu',				key = 'anchor',				panel = 'position',				table = {					'TopLeft',					'Top',					'TopRight',					'Right',					'BottomRight',					'Bottom',					'BottomLeft',					'Left',					'Center',				},			},		{			name = "Frame Level",			kind = "Slider",			key = "frameLevel",			panel = 'position',			min = 1,			max = 100,		},		{			name = "Frame Strata",			kind = "Slider",			key = "frameStrata",			panel = 'position',			min = 1,			max = 8,		},					}	},		{		name = "visibility",		kind = "Panel",		key = "visibility",		panel = "visibility",		options = {						{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "background",			},			{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Statusbar',				panel = "background",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'background',			},									{				name = 'Texture',				kind = 'Media',				key = 'file',				mediaType = 'Border',				panel = "border",			},				{				name = 'Enable',				kind = 'CheckButton',				key = 'enable',				panel = "border",			},			{				name = 'Background Color',				kind = 'ColorPicker',				key = 'color',				panel = 'border',			},			{				name = 'Thickness',				kind = 'Slider',				key = 'thickness',				panel = "border",				min = 1,				max = 32,			},		}	},	}