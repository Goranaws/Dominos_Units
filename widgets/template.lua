local Addon = _G[...]--a super generic widget template, with settings.local template = {}--setting helpersfunction template:GetDefaults()	if self._defaults then		return self._defaults	end	local defs = {		anchor = "Center",		x = 0,		y = 0,		scale = 100,		backdropEnable = false,		backdropPadding = 0,		backdropTexture = "",		backdropColor = {r = 0, b = 0, g = 0, a = .5},		enable = false,		frameLevel = 5,		frameStrata = 2,	}		if self.defaults then		Addon.Merge(self.defaults, defs)	end	self._defaults = self.defaults	return defsendfunction template:GetDefault(setting)	local defs = self:GetDefaults()	return defs[setting]endfunction template:GetSettings()	return self.sets or Addon.Copy(self:GetDefaults())endfunction template:GetSetting(setting)	local sets = self:GetSettings()	local defs = self:GetDefaults()	sets[setting] = sets[setting] or defs[setting]	return sets[setting]endfunction template:GetPosition()	local anchor = self.sets.anchor or self:GetSetting("anchor")	local x = self.sets.x or self:GetSetting("x")	local y = self.sets.y or self:GetSetting("y")	return anchor, x, yendfunction template:GetBackground()	local color = self.sets.backdropColor or self:GetSetting("backdropColor")	local texture = self.sets.backdropTexture or self:GetSetting("backdropTexture")	local pad = self.sets.backdropPadding or self:GetSetting("backdropPadding")	local enable = self.sets.backdropEnable or self:GetSetting("backdropEnable")	return enable, texture, pad, colorendfunction template:GetDimensions()	local width = self.sets.width or self:GetSetting("width")	local height = self.sets.height or self:GetSetting("height")	return width, heightendfunction template:GetFontSettings()	local width = self.sets.fontWidth or self:GetSetting("fontWidth")	local height = self.sets.fontHeight or self:GetSetting("fontHeight")	local size = self.sets.fontSize or self:GetSetting("fontSize")	local font = self.sets.font or self:GetSetting("font")	local color = self.sets.fontcolor or self:GetSetting("fontcolor")	local justifyH = self.sets.justifyH or self:GetSetting("justifyH")	local justifyV = self.sets.justifyV or self:GetSetting("justifyV")	local anchor = self.sets.fontanchor or self:GetSetting("fontanchor")	local x = self.sets.fontX or self:GetSetting("fontX")	local y = self.sets.fontY or self:GetSetting("fontY")	return width, height, size, font, color, justifyH, justifyV, anchor, x, yendfunction template:GetSubFontSettings()	local width = self.sets.subfontWidth or self:GetSetting("subfontWidth")	local height = self.sets.subfontHeight or self:GetSetting("subfontHeight")	local size = self.sets.subfontSize or self:GetSetting("subfontSize")	local font = self.sets.subfont or self:GetSetting("subfont")	local color = self.sets.subfontcolor or self:GetSetting("subfontcolor")	local justifyH = self.sets.subfontJustifyH or self:GetSetting("subfontJustifyH")	local justifyV = self.sets.subfontJustifyV or self:GetSetting("subfontJustifyV")	local anchor = self.sets.subfontanchor or self:GetSetting("subfontanchor")	local x = self.sets.subfontX or self:GetSetting("subfontX")	local y = self.sets.subfontY or self:GetSetting("subfontY")	return width, height, size, font, color, justifyH, justifyV, anchor, x, yendfunction template:GetMediaPath(mediaType, mediaName)	if Addon.lib then		self.sets[mediaType.."_mediaPath"] = Addon.lib and Addon.lib:Fetch(mediaType, mediaName)	else		return self.sets[mediaType.."_mediaPath"]	end	return (Addon.lib and Addon.lib:Fetch(mediaType, mediaName))endfunction template:GetFormat()	local mouseover = self.sets.mouseover or self:GetSetting("mouseover")	local _format = self.sets.format or self:GetSetting("format")	return mouseover, _formatendfunction template:GetLayer()	local layer = self.sets.frameStrata or self:GetSetting("frameStrata")	local level = self.sets.frameLevel or self:GetSetting("frameLevel")	return layer, levelendfunction template:GetOpacity()	local alpha = self.sets.alpha or self:GetSetting("alpha")	local fadeAlpha = self.sets.fadeAlpha or self:GetSetting("fadeAlpha")	return alpha, fadeAlphaendfunction template:GetMouse()	local disableMouse = self.sets.disableMouse or self:GetSetting("disableMouse")	return disableMouseend--layout functionsfunction template:Rescale()	self:SetScale(self:GetSetting("scale")/100)	self.owner.box:SetScale(self:GetSetting("scale")/100)endfunction template:Reposisition()	local scale = self:GetSetting("scale")/100	local anchor, x, y = self:GetPosition()		if scale and anchor and x and y then		self:ClearAllPoints()		if not (self:GetSetting("justifyV") and self:GetSetting("justifyH")) and (self.text) then			self.text:ClearAllPoints()			self:SetAllPoints(self.text)		else			self:SetPoint(anchor,  self:GetParent(), x/scale, y/scale)		end	endendfunction template:SetBackground()	local enable, texture, pad, color = self:GetBackground()	-- if enable == "true" then		-- self:SetBackdrop({			-- bgFile = texture,			-- insets = {left = -pad, right = -pad, top = -pad, bottom = -pad},			-- tile = false,		-- })		-- self:SetBackdropColor(color.r, color.g, color.b, scolor.a)	-- else		-- self:SetBackdrop({})	-- endendfunction template:Resize()	local width, height = self:GetDimensions()	if self.owner and width then		if self.owner.sets and self.owner.sets.magicWidth then			width = (width + (self.owner.sets.width - 232)) * (self:GetSetting("scale")/100)		end	end	if width and height then		self:SetSize(width, height)	elseif width and (not height) then		self:SetWidth(width)	elseif height and (not width) then		self:SetHeight(height)	endendlocal _hori = {	'LEFT',	'CENTER',	'RIGHT',}local _vert = {	'TOP',	'MIDDLE',	'BOTTOM',}function template:RepositionText()	if self.text then		local width, height, size, font, color, justifyH, justifyV, anchor, x, y = self:GetFontSettings()		local scale = self:GetSetting("scale")/100		if width and height then			self.text:SetSize(width, height)		elseif width and (not height) then			self.text:SetWidth(width)		elseif height and (not width) then			self.text:SetHeight(height)		end		local path = self:GetMediaPath("font", font or self:GetDefault("font"))		self.text:SetFont(path, size or 12)		self.text:SetTextColor(color.r, color.g, color.b, color.a)		if justifyH then			self.text:SetJustifyH(_hori[justifyH] or "MIDDLE") -- Sets horizontal text justification ('LEFT','RIGHT', or 'CENTER')		end		if justifyV then			self.text:SetJustifyV(_vert[justifyV]) -- Sets vertical text justification ('TOP','BOTTOM', or 'MIDDLE')		end		anchorFrame = self				if self.text.DO_NOT_MOVE then			--return		end		self.text:ClearAllPoints()				if not (self:GetSetting("justifyV") and self:GetSetting("justifyH") and self:GetSetting("fontanchor"))  then			anchor, x, y = self:GetPosition()			anchorFrame = self:GetParent()					end			if not (self:GetSetting("justifyV") and self:GetSetting("justifyH")) then			self.text:SetPoint(anchor,  anchorFrame, x/scale, y/scale)		else			self.text:SetAllPoints(self)		end	endendfunction template:RepositionSubText()	if self.subtext then		local width, height, size, font, color, justifyH, justifyV, anchor, x, y = self:GetSubFontSettings()				if width and height then			self.subtext:SetSize(width, height)		elseif width and (not height) then			self.subtext:SetWidth(width)		elseif height and (not width) then			self.subtext:SetHeight(height)		end		local path = self:GetMediaPath("font", font or self:GetDefault("font"))		self.subtext:SetFont(path, size or 12)		self.subtext:SetTextColor(color.r, color.g, color.b, color.a)		if justifyH then			self.subtext:SetJustifyH(_hori[justifyH]) -- Sets horizontal text justification ('LEFT','RIGHT', or 'CENTER')		end		if justifyV then			self.subtext:SetJustifyV(_vert[justifyV]) -- Sets vertical text justification ('TOP','BOTTOM', or 'MIDDLE')		end	endendfunction template:ApplyColor()	local color = self:GetSetting("color")	if color then		if self.UpdateColor then			self:UpdateColor(color.r, color.g, color.b, color.a)		end			endendfunction template:ApplyTexture()	local texture = self:GetSetting("texture")	if texture then		if self.ResetTexture then			local path = self:GetMediaPath(self.mediaType, texture or self:GetDefault("texture"))			self:ResetTexture(path)		end			endendfunction template:SetLayer()	local layer, level = self:GetLayer()	if layer and level then		local Strata = Addon.layers[ceil(layer or 1)] or "MEDIUM"		self:SetFrameStrata(Strata)		self:SetFrameLevel(ceil(level)+1)	endendlocal onEnter = function(self, alpha)	self:SetAlpha(alpha/100)endlocal onLeave = function(self, fadeAlpha)	self:SetAlpha(fadeAlpha/100)endfunction template:SetOpacity()	local alpha, fadeAlpha = self:GetOpacity()	if alpha and fadeAlpha then		if self:HasScript("OnEnter") then			local enter = self:GetScript("OnEnter")			if enter then				self:HookScript("OnEnter", function(self)					onEnter(self, alpha)				end)			else				self:SetScript("OnEnter",  function(self)					onEnter(self, alpha)				end)			end		end		if self:HasScript("OnLeave") then			local leave = self:GetScript("OnLeave")			if leave then				self:HookScript("OnLeave",  function(self)					onLeave(self, fadeAlpha)				end)			else				self:SetScript("OnLeave",  function(self)					onLeave(self, fadeAlpha)				end)			end		end		self:SetAlpha(fadeAlpha/100)	endendfunction template:SetMouse()	local disableMouse = self:GetMouse()	if self.key == "focus" then		local s = true		if disableMouse == true then			s = false		end		self:EnableMouse(s)	else		self:EnableMouse(false)	endendfunction template:UpdateLayout()	if (not self.sets) or InCombatLockdown() then		return	end	self:Rescale()	self:Reposisition()	self:SetBackground()	self:Resize()	self:RepositionText()	self:ApplyColor()	self:ApplyTexture()	self:SetLayer()	self:SetOpacity()	self:SetMouse()	if self.SetBorder then		self:SetBorder()	end		if self.Layout then		self:Layout()	endend--update Functionsfunction template:UpdateText()	if self.text then		if self.GetDisplayText then			self.text:SetText(self:GetDisplayText())		end	endendfunction template:UpdateSubText()	if self.text then		if self.GetDisplaySubText then			self:SetText(self:GetDisplaySubText())		end	endendlocal function FormatValue(value)	if (value <= 1000) then		return value	elseif (value < 1000000) then		return ('%.1fk'):format(value / 1000);	elseif (value < 1000000000) then		return ('%.2fm'):format(value / 1000000);	else		return ('%.2fg'):format(value / 1000000000);	endendlocal function FormatBarValues(value,max,type)	if (type == 'none') or (value == nil) then		return ''	elseif (type == 'value') or (max == 0) then		return string.format('%s / %s',AbbreviateLargeNumbers(value),AbbreviateLargeNumbers(max))	elseif (type == 'current') then		return string.format('%s',AbbreviateLargeNumbers(value))	elseif (type == 'full') then		return string.format('%s / %s (%.0f%%)',FormatValue(value),FormatValue(max),value / max * 100)	elseif (type == 'deficit') then		if (value ~= max) then			return string.format('-%s',FormatValue(max - value))		else			return ''		end	elseif (type == 'percent') then		return string.format('%.0f%%',value / max * 100)	endendfunction template:UpdateValues()	if self.text then		if self.GetValues then			local minimum, maximum, current, overideText = self:GetValues()			if self.SetMinMaxValues then				self:SetMinMaxValues(minimum or 0, maximum or 0)			end						local value, text = current or 0, ""						if ((overide) or (maximum <= 0)or (maximum == nil)) and self.SetText then				value = math.max(minimum, 0)				text = overideText or text			end			local sets = self.sets			local mouseover, _format = self:GetFormat()			if mouseover ~= 'none' and (MouseIsOver(self)) then				text = FormatBarValues(value, maximum, mouseover)			else				text = FormatBarValues(value, maximum, _format)			end			self.text:SetText(text)			self:SetValue(value)		end	endendfunction template:UpdateDisplayTexture()	if self.GetDisplayTexture then		local texture = self:GetDisplayTexture()		self:SetTexturePath(texture)	endendfunction template:OnUpdate()	self:UpdateText()	self:UpdateSubText()	self:UpdateValues()	self:UpdateDisplayTexture()		if self.Update then		self:Update()	endendAddon._TEMPLATE = template